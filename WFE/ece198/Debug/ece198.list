
ece198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007044  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007410  08007410  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007410  08007410  00017410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007418  08007418  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000074  08007494  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08007494  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b18  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002878  00000000  00000000  00031bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00034478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dad  00000000  00000000  00035600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001849f  00000000  00000000  000363ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015de7  00000000  00000000  0004e84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090edf  00000000  00000000  00064633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ef0  00000000  00000000  000f5514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000fa404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071cc 	.word	0x080071cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080071cc 	.word	0x080071cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <I2C_Delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Delay() {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5000; ++i)
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	e003      	b.n	80005a0 <I2C_Delay+0x14>
		__NOP();
 8000598:	bf00      	nop
	for (int i = 0; i < 5000; ++i)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f241 3287 	movw	r2, #4999	; 0x1387
 80005a6:	4293      	cmp	r3, r2
 80005a8:	ddf6      	ble.n	8000598 <I2C_Delay+0xc>
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SCL_nodelay>:

void SCL_nodelay(int value) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SOFT_SCL_GPIO_Port, SOFT_SCL_Pin, value ? 1 : 0);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	bf14      	ite	ne
 80005c6:	2301      	movne	r3, #1
 80005c8:	2300      	moveq	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	461a      	mov	r2, r3
 80005ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <SCL_nodelay+0x28>)
 80005d4:	f001 fa80 	bl	8001ad8 <HAL_GPIO_WritePin>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40020000 	.word	0x40020000

080005e4 <SCL>:

void SCL(int value) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	SCL_nodelay(value);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ffe3 	bl	80005b8 <SCL_nodelay>
	I2C_Delay();
 80005f2:	f7ff ffcb 	bl	800058c <I2C_Delay>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <SDA_nodelay>:

void SDA_nodelay(int value) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SOFT_SDA_GPIO_Port, SOFT_SDA_Pin, value ? 1 : 0);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf14      	ite	ne
 800060e:	2301      	movne	r3, #1
 8000610:	2300      	moveq	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <SDA_nodelay+0x40>)
 800061c:	f001 fa5c 	bl	8001ad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, value ? 1 : 0);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	bf14      	ite	ne
 8000626:	2301      	movne	r3, #1
 8000628:	2300      	moveq	r3, #0
 800062a:	b2db      	uxtb	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	2120      	movs	r1, #32
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <SDA_nodelay+0x40>)
 8000632:	f001 fa51 	bl	8001ad8 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020000 	.word	0x40020000

08000644 <SDA>:

void SDA(int value) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	SDA_nodelay(value);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ffd7 	bl	8000600 <SDA_nodelay>
	I2C_Delay();
 8000652:	f7ff ff9b 	bl	800058c <I2C_Delay>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <I2C_Send_Byte>:

void I2C_Send_Byte(uint8_t x) {
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	4603      	mov	r3, r0
 8000666:	71fb      	strb	r3, [r7, #7]
	for (int i = 7; i >= 0; --i) {
 8000668:	2307      	movs	r3, #7
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e014      	b.n	8000698 <I2C_Send_Byte+0x3a>
		SDA(x & (1 << i));
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	2101      	movs	r1, #1
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	fa01 f303 	lsl.w	r3, r1, r3
 8000678:	4013      	ands	r3, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffe2 	bl	8000644 <SDA>
		SCL(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff ffaf 	bl	80005e4 <SCL>
		SCL(0);
 8000686:	2000      	movs	r0, #0
 8000688:	f7ff ffac 	bl	80005e4 <SCL>
		SDA_nodelay(0);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff ffb7 	bl	8000600 <SDA_nodelay>
	for (int i = 7; i >= 0; --i) {
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3b01      	subs	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b00      	cmp	r3, #0
 800069c:	dae7      	bge.n	800066e <I2C_Send_Byte+0x10>
	}

	// "Read" ACK/NACK bit.
	SDA(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff ffd0 	bl	8000644 <SDA>
	SCL(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff ff9d 	bl	80005e4 <SCL>
	SCL(0);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f7ff ff9a 	bl	80005e4 <SCL>
	SDA(0);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff ffc7 	bl	8000644 <SDA>
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <I2C_Send_Short>:

void I2C_Send_Short(uint16_t x) {
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	80fb      	strh	r3, [r7, #6]
	I2C_Send_Byte(x >> 8);
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffc4 	bl	800065e <I2C_Send_Byte>
	I2C_Send_Byte(x & 0xff);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ffbf 	bl	800065e <I2C_Send_Byte>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <I2C_Init>:

void I2C_Init() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; ++i) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e004      	b.n	80006fe <I2C_Init+0x16>
		I2C_Delay();
 80006f4:	f7ff ff4a 	bl	800058c <I2C_Delay>
	for (int i = 0; i < 100; ++i) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3301      	adds	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b63      	cmp	r3, #99	; 0x63
 8000702:	ddf7      	ble.n	80006f4 <I2C_Init+0xc>
	}
	SDA_nodelay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff ff7b 	bl	8000600 <SDA_nodelay>
	SCL(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff ff6a 	bl	80005e4 <SCL>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <I2C_Start>:

void I2C_Start() {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	SDA(0);
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff91 	bl	8000644 <SDA>
	SCL(0);
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff ff5e 	bl	80005e4 <SCL>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <I2C_Write>:

void I2C_Write(uint16_t value) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	80fb      	strh	r3, [r7, #6]
	I2C_Send_Byte((TARGET_ADDRESS << 1) | I2C_WRITE);
 8000736:	20b0      	movs	r0, #176	; 0xb0
 8000738:	f7ff ff91 	bl	800065e <I2C_Send_Byte>
	I2C_Send_Short(value);
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ffbd 	bl	80006be <I2C_Send_Short>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <I2C_ACK>:

// Send an ACK condition by pulsing SCL while pulling SDA LOW.
void I2C_ACK() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	SDA(0);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff77 	bl	8000644 <SDA>
	SCL(1);
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff ff44 	bl	80005e4 <SCL>
	SCL(0);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff41 	bl	80005e4 <SCL>
	SDA(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ff6e 	bl	8000644 <SDA>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <I2C_NACK>:

// Send a NACK condition by pulsing SCL while leaving SDA pulled HIGH.
void I2C_NACK() {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	SCL(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff ff37 	bl	80005e4 <SCL>
	SCL(0);
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff ff34 	bl	80005e4 <SCL>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <I2C_Restart>:

// Send the repeated START condition Sr by ensuring both pins are HIGH and then sending the START condition.
void I2C_Restart() {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	SDA_nodelay(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff ff3b 	bl	8000600 <SDA_nodelay>
	SCL(1);
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff2a 	bl	80005e4 <SCL>
	I2C_Start();
 8000790:	f7ff ffc2 	bl	8000718 <I2C_Start>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <I2C_Stop>:

// Send the STOP condition by pulling SDA followed by SCL HIGH.
void I2C_Stop() {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	SCL(0);
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff21 	bl	80005e4 <SCL>
	SDA(0);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff4e 	bl	8000644 <SDA>
	SDA(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff ff4b 	bl	8000644 <SDA>
	SCL(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff ff18 	bl	80005e4 <SCL>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <Serial_Send>:

void Serial_Send(char *data) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	size_t len = strlen(data);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fd0d 	bl	80001e0 <strlen>
 80007c6:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, HAL_MAX_DELAY);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <Serial_Send+0x28>)
 80007d4:	f002 fdd7 	bl	8003386 <HAL_UART_Transmit>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000130 	.word	0x20000130

080007e4 <crc8>:

uint8_t crc8(uint8_t *data, size_t capacity) {
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	uint8_t crc = CRC8_INIT;
 80007ee:	23ff      	movs	r3, #255	; 0xff
 80007f0:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < capacity; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	e021      	b.n	800083c <crc8+0x58>
		crc ^= data[i];
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	4413      	add	r3, r2
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	7dfb      	ldrb	r3, [r7, #23]
 8000802:	4053      	eors	r3, r2
 8000804:	75fb      	strb	r3, [r7, #23]
		for (int j = 0; j < 8; ++j) {
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	e011      	b.n	8000830 <crc8+0x4c>
			if ((crc & (1 << 7))) {
 800080c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000810:	2b00      	cmp	r3, #0
 8000812:	da07      	bge.n	8000824 <crc8+0x40>
				crc <<= 1;
 8000814:	7dfb      	ldrb	r3, [r7, #23]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	75fb      	strb	r3, [r7, #23]
				crc ^= CRC8_POLYNOMIAL;
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000820:	75fb      	strb	r3, [r7, #23]
 8000822:	e002      	b.n	800082a <crc8+0x46>
			} else {
				crc <<= 1;
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	75fb      	strb	r3, [r7, #23]
		for (int j = 0; j < 8; ++j) {
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3301      	adds	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b07      	cmp	r3, #7
 8000834:	ddea      	ble.n	800080c <crc8+0x28>
	for (size_t i = 0; i < capacity; ++i) {
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	3301      	adds	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	429a      	cmp	r2, r3
 8000842:	d3d9      	bcc.n	80007f8 <crc8+0x14>
			}
		}
	}
	return crc;
 8000844:	7dfb      	ldrb	r3, [r7, #23]
}
 8000846:	4618      	mov	r0, r3
 8000848:	371c      	adds	r7, #28
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <I2C_Read>:

// Reads bytes of data then reads one more byte for CRC checking.
// Data is returned in the *data parameter which is guaranteed to
// stay the same if the CRC was invalid.
unsigned int I2C_Read(size_t bytes, unsigned int *data) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b098      	sub	sp, #96	; 0x60
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	Serial_Send("-------- BEGIN READ --------\r\n");
 800085e:	4851      	ldr	r0, [pc, #324]	; (80009a4 <I2C_Read+0x150>)
 8000860:	f7ff ffaa 	bl	80007b8 <Serial_Send>
	I2C_Send_Byte((TARGET_ADDRESS << 1) | I2C_READ);
 8000864:	20b1      	movs	r0, #177	; 0xb1
 8000866:	f7ff fefa 	bl	800065e <I2C_Send_Byte>
	SDA(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff feea 	bl	8000644 <SDA>
	unsigned int read = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (int i = 0; i < bytes; ++i) {
 8000874:	2300      	movs	r3, #0
 8000876:	65bb      	str	r3, [r7, #88]	; 0x58
 8000878:	e02f      	b.n	80008da <I2C_Read+0x86>
		for (int bit = 0; bit < 8; ++bit) {
 800087a:	2300      	movs	r3, #0
 800087c:	657b      	str	r3, [r7, #84]	; 0x54
 800087e:	e021      	b.n	80008c4 <I2C_Read+0x70>
			SCL(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff feaf 	bl	80005e4 <SCL>
			if (HAL_GPIO_ReadPin(SOFT_SDA_GPIO_Port, SOFT_SDA_Pin)) {
 8000886:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088a:	4847      	ldr	r0, [pc, #284]	; (80009a8 <I2C_Read+0x154>)
 800088c:	f001 f90c 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00a      	beq.n	80008ac <I2C_Read+0x58>
				Serial_Send("1");
 8000896:	4845      	ldr	r0, [pc, #276]	; (80009ac <I2C_Read+0x158>)
 8000898:	f7ff ff8e 	bl	80007b8 <Serial_Send>
				read |= 1;
 800089c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
				read <<= 1;
 80008a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008aa:	e005      	b.n	80008b8 <I2C_Read+0x64>
			} else {
				Serial_Send("0");
 80008ac:	4840      	ldr	r0, [pc, #256]	; (80009b0 <I2C_Read+0x15c>)
 80008ae:	f7ff ff83 	bl	80007b8 <Serial_Send>
				read <<= 1;
 80008b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			SCL(0);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff fe93 	bl	80005e4 <SCL>
		for (int bit = 0; bit < 8; ++bit) {
 80008be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008c0:	3301      	adds	r3, #1
 80008c2:	657b      	str	r3, [r7, #84]	; 0x54
 80008c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008c6:	2b07      	cmp	r3, #7
 80008c8:	ddda      	ble.n	8000880 <I2C_Read+0x2c>
		}
		Serial_Send(" (read) \r\n");
 80008ca:	483a      	ldr	r0, [pc, #232]	; (80009b4 <I2C_Read+0x160>)
 80008cc:	f7ff ff74 	bl	80007b8 <Serial_Send>
		I2C_ACK();
 80008d0:	f7ff ff3c 	bl	800074c <I2C_ACK>
	for (int i = 0; i < bytes; ++i) {
 80008d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008d6:	3301      	adds	r3, #1
 80008d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80008da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d8cb      	bhi.n	800087a <I2C_Read+0x26>
	}
	// NOTE: multiplication by 2 for some reason.
	read /= 2;
 80008e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	65fb      	str	r3, [r7, #92]	; 0x5c

	unsigned int crc = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	653b      	str	r3, [r7, #80]	; 0x50
	for (int bit = 0; bit < 8; ++bit) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008f0:	e021      	b.n	8000936 <I2C_Read+0xe2>
		SCL(1);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff fe76 	bl	80005e4 <SCL>
		if (HAL_GPIO_ReadPin(SOFT_SDA_GPIO_Port, SOFT_SDA_Pin)) {
 80008f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fc:	482a      	ldr	r0, [pc, #168]	; (80009a8 <I2C_Read+0x154>)
 80008fe:	f001 f8d3 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00a      	beq.n	800091e <I2C_Read+0xca>
			Serial_Send("1");
 8000908:	4828      	ldr	r0, [pc, #160]	; (80009ac <I2C_Read+0x158>)
 800090a:	f7ff ff55 	bl	80007b8 <Serial_Send>
			crc |= 1;
 800090e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	653b      	str	r3, [r7, #80]	; 0x50
			crc <<= 1;
 8000916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	653b      	str	r3, [r7, #80]	; 0x50
 800091c:	e005      	b.n	800092a <I2C_Read+0xd6>
		} else {
			Serial_Send("0");
 800091e:	4824      	ldr	r0, [pc, #144]	; (80009b0 <I2C_Read+0x15c>)
 8000920:	f7ff ff4a 	bl	80007b8 <Serial_Send>
			crc <<= 1;
 8000924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	653b      	str	r3, [r7, #80]	; 0x50
		}
		SCL(0);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fe5a 	bl	80005e4 <SCL>
	for (int bit = 0; bit < 8; ++bit) {
 8000930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000932:	3301      	adds	r3, #1
 8000934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000938:	2b07      	cmp	r3, #7
 800093a:	ddda      	ble.n	80008f2 <I2C_Read+0x9e>
	}
	I2C_NACK();
 800093c:	f7ff ff16 	bl	800076c <I2C_NACK>

	// NOTE: multiplication by 2 for some reason.
	crc /= 2;
 8000940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000942:	085b      	lsrs	r3, r3, #1
 8000944:	653b      	str	r3, [r7, #80]	; 0x50
	Serial_Send(" (crc) \r\n");
 8000946:	481c      	ldr	r0, [pc, #112]	; (80009b8 <I2C_Read+0x164>)
 8000948:	f7ff ff36 	bl	80007b8 <Serial_Send>

	char str[64];
	sprintf(str, "%d (value)\r\n", *data);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4919      	ldr	r1, [pc, #100]	; (80009bc <I2C_Read+0x168>)
 8000956:	4618      	mov	r0, r3
 8000958:	f005 ff94 	bl	8006884 <siprintf>
	Serial_Send(str);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff29 	bl	80007b8 <Serial_Send>

	// NOTE: Assumes 2 bytes of data are read.
	uint8_t buf[2] = { read >> 8, read & 0xff };
 8000966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	b2db      	uxtb	r3, r3
 800096c:	723b      	strb	r3, [r7, #8]
 800096e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000970:	b2db      	uxtb	r3, r3
 8000972:	727b      	strb	r3, [r7, #9]
	if (crc8(buf, 2) != crc) {
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	2102      	movs	r1, #2
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff32 	bl	80007e4 <crc8>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000986:	4293      	cmp	r3, r2
 8000988:	d004      	beq.n	8000994 <I2C_Read+0x140>
		Serial_Send("Bad CRC!\r\n");
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <I2C_Read+0x16c>)
 800098c:	f7ff ff14 	bl	80007b8 <Serial_Send>
		return 1;
 8000990:	2301      	movs	r3, #1
 8000992:	e003      	b.n	800099c <I2C_Read+0x148>
	}

	// Only update value on valid CRC.
	*data = read;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000998:	601a      	str	r2, [r3, #0]
	return 0;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3760      	adds	r7, #96	; 0x60
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	080071e4 	.word	0x080071e4
 80009a8:	40020000 	.word	0x40020000
 80009ac:	08007204 	.word	0x08007204
 80009b0:	08007208 	.word	0x08007208
 80009b4:	0800720c 	.word	0x0800720c
 80009b8:	08007218 	.word	0x08007218
 80009bc:	08007224 	.word	0x08007224
 80009c0:	08007234 	.word	0x08007234

080009c4 <Buzzer>:

// Controls the buzzer.
void Buzzer(unsigned int time, unsigned int co2, unsigned int badcrc) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
	if (co2 > CO2_TRIGGER_LEVEL) {
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009d6:	d921      	bls.n	8000a1c <Buzzer+0x58>
		if (time % 800 < 400) {
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <Buzzer+0xb4>)
 80009dc:	fba3 1302 	umull	r1, r3, r3, r2
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80009e6:	fb01 f303 	mul.w	r3, r1, r3
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80009f0:	d20a      	bcs.n	8000a08 <Buzzer+0x44>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period);
 80009f2:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <Buzzer+0xb8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a21      	ldr	r2, [pc, #132]	; (8000a7c <Buzzer+0xb8>)
 80009f8:	68d2      	ldr	r2, [r2, #12]
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2108      	movs	r1, #8
 8000a00:	481f      	ldr	r0, [pc, #124]	; (8000a80 <Buzzer+0xbc>)
 8000a02:	f001 f869 	bl	8001ad8 <HAL_GPIO_WritePin>
		} else {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
		}
	}
}
 8000a06:	e033      	b.n	8000a70 <Buzzer+0xac>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <Buzzer+0xb8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2108      	movs	r1, #8
 8000a14:	481a      	ldr	r0, [pc, #104]	; (8000a80 <Buzzer+0xbc>)
 8000a16:	f001 f85f 	bl	8001ad8 <HAL_GPIO_WritePin>
}
 8000a1a:	e029      	b.n	8000a70 <Buzzer+0xac>
		if (badcrc > MAINTENANCE_TRIGGER) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b05      	cmp	r3, #5
 8000a20:	d91d      	bls.n	8000a5e <Buzzer+0x9a>
			if (time < TIME_RESET / 10 || (time > TIME_RESET / 2 && time < TIME_RESET / 2 + TIME_RESET / 10)) {
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a28:	d309      	bcc.n	8000a3e <Buzzer+0x7a>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d90a      	bls.n	8000a4a <Buzzer+0x86>
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d805      	bhi.n	8000a4a <Buzzer+0x86>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period);
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <Buzzer+0xb8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <Buzzer+0xb8>)
 8000a44:	68d2      	ldr	r2, [r2, #12]
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
 8000a48:	e003      	b.n	8000a52 <Buzzer+0x8e>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <Buzzer+0xb8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2108      	movs	r1, #8
 8000a56:	480a      	ldr	r0, [pc, #40]	; (8000a80 <Buzzer+0xbc>)
 8000a58:	f001 f83e 	bl	8001ad8 <HAL_GPIO_WritePin>
}
 8000a5c:	e008      	b.n	8000a70 <Buzzer+0xac>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <Buzzer+0xb8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2200      	movs	r2, #0
 8000a64:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2108      	movs	r1, #8
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <Buzzer+0xbc>)
 8000a6c:	f001 f834 	bl	8001ad8 <HAL_GPIO_WritePin>
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	51eb851f 	.word	0x51eb851f
 8000a7c:	200000e8 	.word	0x200000e8
 8000a80:	40020400 	.word	0x40020400

08000a84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
 8000a8a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a8c:	f000 fd0c 	bl	80014a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a90:	f000 f974 	bl	8000d7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a94:	f000 fa9c 	bl	8000fd0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000a98:	f000 fa70 	bl	8000f7c <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000a9c:	f000 f9da 	bl	8000e54 <MX_SPI3_Init>
	MX_TIM3_Init();
 8000aa0:	f000 fa0e 	bl	8000ec0 <MX_TIM3_Init>
	MX_FATFS_Init();
 8000aa4:	f002 ffe4 	bl	8003a70 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	Serial_Send("Hello, Board!\r\n");
 8000aa8:	48a2      	ldr	r0, [pc, #648]	; (8000d34 <main+0x2b0>)
 8000aaa:	f7ff fe85 	bl	80007b8 <Serial_Send>
	HAL_Delay(1000);
 8000aae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab2:	f000 fd6b 	bl	800158c <HAL_Delay>
	Serial_Send("Attempting to mount SD card.\r\n");
 8000ab6:	48a0      	ldr	r0, [pc, #640]	; (8000d38 <main+0x2b4>)
 8000ab8:	f7ff fe7e 	bl	80007b8 <Serial_Send>
	FATFS fs;
	FRESULT fresult = f_mount(&fs, "", 1);
 8000abc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	499e      	ldr	r1, [pc, #632]	; (8000d3c <main+0x2b8>)
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fa5f 	bl	8005f88 <f_mount>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 34d3 	strb.w	r3, [r7, #1235]	; 0x4d3
	if (fresult != FR_OK) {
 8000ad0:	f897 34d3 	ldrb.w	r3, [r7, #1235]	; 0x4d3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d010      	beq.n	8000afa <main+0x76>
		char str[64];
		sprintf(str, "%d\r\n", fresult);
 8000ad8:	f897 24d3 	ldrb.w	r2, [r7, #1235]	; 0x4d3
 8000adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae0:	4997      	ldr	r1, [pc, #604]	; (8000d40 <main+0x2bc>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 fece 	bl	8006884 <siprintf>
		Serial_Send(str);
 8000ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe63 	bl	80007b8 <Serial_Send>
		Serial_Send("Failure mounting!\r\n");
 8000af2:	4894      	ldr	r0, [pc, #592]	; (8000d44 <main+0x2c0>)
 8000af4:	f7ff fe60 	bl	80007b8 <Serial_Send>
 8000af8:	e002      	b.n	8000b00 <main+0x7c>
	} else {
		Serial_Send("Success mounting!\r\n");
 8000afa:	4893      	ldr	r0, [pc, #588]	; (8000d48 <main+0x2c4>)
 8000afc:	f7ff fe5c 	bl	80007b8 <Serial_Send>
	}

	FIL fil;
	fresult = f_open(&fil, "log.txt", FA_WRITE | FA_OPEN_APPEND | FA_CREATE_ALWAYS);
 8000b00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b04:	223a      	movs	r2, #58	; 0x3a
 8000b06:	4991      	ldr	r1, [pc, #580]	; (8000d4c <main+0x2c8>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fa83 	bl	8006014 <f_open>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f887 34d3 	strb.w	r3, [r7, #1235]	; 0x4d3
	if (fresult != FR_OK) {
 8000b14:	f897 34d3 	ldrb.w	r3, [r7, #1235]	; 0x4d3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d010      	beq.n	8000b3e <main+0xba>
		char str[64];
		sprintf(str, "%d\r\n", fresult);
 8000b1c:	f897 24d3 	ldrb.w	r2, [r7, #1235]	; 0x4d3
 8000b20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b24:	4986      	ldr	r1, [pc, #536]	; (8000d40 <main+0x2bc>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f005 feac 	bl	8006884 <siprintf>
		Serial_Send(str);
 8000b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe41 	bl	80007b8 <Serial_Send>
		Serial_Send("Failure opening!\r\n");
 8000b36:	4886      	ldr	r0, [pc, #536]	; (8000d50 <main+0x2cc>)
 8000b38:	f7ff fe3e 	bl	80007b8 <Serial_Send>
 8000b3c:	e002      	b.n	8000b44 <main+0xc0>
	} else {
		Serial_Send("Success opening!\r\n");
 8000b3e:	4885      	ldr	r0, [pc, #532]	; (8000d54 <main+0x2d0>)
 8000b40:	f7ff fe3a 	bl	80007b8 <Serial_Send>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	I2C_Init();
 8000b44:	f7ff fdd0 	bl	80006e8 <I2C_Init>
	I2C_Start();
 8000b48:	f7ff fde6 	bl	8000718 <I2C_Start>
	I2C_Write(INIT_AIR_QUALITY);
 8000b4c:	f242 0003 	movw	r0, #8195	; 0x2003
 8000b50:	f7ff fdec 	bl	800072c <I2C_Write>
	I2C_Stop();
 8000b54:	f7ff fe20 	bl	8000798 <I2C_Stop>

	// Delay before valid measurements.
	for (int i = 0; i < 15; ++i) {
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8000b5e:	e016      	b.n	8000b8e <main+0x10a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2120      	movs	r1, #32
 8000b64:	487c      	ldr	r0, [pc, #496]	; (8000d58 <main+0x2d4>)
 8000b66:	f000 ffb7 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6e:	f000 fd0d 	bl	800158c <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2120      	movs	r1, #32
 8000b76:	4878      	ldr	r0, [pc, #480]	; (8000d58 <main+0x2d4>)
 8000b78:	f000 ffae 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000b7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b80:	f000 fd04 	bl	800158c <HAL_Delay>
	for (int i = 0; i < 15; ++i) {
 8000b84:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b88:	3301      	adds	r3, #1
 8000b8a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8000b8e:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b92:	2b0e      	cmp	r3, #14
 8000b94:	dde4      	ble.n	8000b60 <main+0xdc>
	}

	unsigned int all_time = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
	unsigned int time = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
	unsigned int co2 = 400;
 8000ba2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8000ba6:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000baa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bae:	601a      	str	r2, [r3, #0]
	unsigned int badcrc = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
	while (1) {
		if (time % (TIME_RESET / 10) == 0) {
 8000bb6:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 8000bba:	4b68      	ldr	r3, [pc, #416]	; (8000d5c <main+0x2d8>)
 8000bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc0:	095b      	lsrs	r3, r3, #5
 8000bc2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bc6:	fb01 f303 	mul.w	r3, r1, r3
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d149      	bne.n	8000c64 <main+0x1e0>
			I2C_Start();
 8000bd0:	f7ff fda2 	bl	8000718 <I2C_Start>
			I2C_Write(MEASURE_AIR_QUALITY);
 8000bd4:	f242 0008 	movw	r0, #8200	; 0x2008
 8000bd8:	f7ff fda8 	bl	800072c <I2C_Write>
			I2C_Restart();
 8000bdc:	f7ff fdd0 	bl	8000780 <I2C_Restart>
			if (I2C_Read(2, &co2)) {
 8000be0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000be4:	4619      	mov	r1, r3
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fe34 	bl	8000854 <I2C_Read>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <main+0x17a>
				++badcrc;
 8000bf2:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8000bfc:	e030      	b.n	8000c60 <main+0x1dc>
			} else {
				badcrc = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8

				UINT bytesWrote;
				BYTE str[35];
				sprintf(str, "%15d,%15d\r\n", all_time, co2);
 8000c04:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8000c08:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	1d38      	adds	r0, r7, #4
 8000c10:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8000c14:	4952      	ldr	r1, [pc, #328]	; (8000d60 <main+0x2dc>)
 8000c16:	f005 fe35 	bl	8006884 <siprintf>
				fresult = f_write(&fil, str, 35, &bytesWrote);
 8000c1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c1e:	1d39      	adds	r1, r7, #4
 8000c20:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000c24:	2223      	movs	r2, #35	; 0x23
 8000c26:	f005 fbb3 	bl	8006390 <f_write>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f887 34d3 	strb.w	r3, [r7, #1235]	; 0x4d3
				if (fresult == FR_OK) {
 8000c30:	f897 34d3 	ldrb.w	r3, [r7, #1235]	; 0x4d3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d103      	bne.n	8000c40 <main+0x1bc>
					Serial_Send("Wrote bytes");
 8000c38:	484a      	ldr	r0, [pc, #296]	; (8000d64 <main+0x2e0>)
 8000c3a:	f7ff fdbd 	bl	80007b8 <Serial_Send>
 8000c3e:	e00f      	b.n	8000c60 <main+0x1dc>
				} else {
					char str[64];
					sprintf(str, "%d\r\n", fresult);
 8000c40:	f897 24d3 	ldrb.w	r2, [r7, #1235]	; 0x4d3
 8000c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c48:	493d      	ldr	r1, [pc, #244]	; (8000d40 <main+0x2bc>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f005 fe1a 	bl	8006884 <siprintf>
					Serial_Send(str);
 8000c50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fdaf 	bl	80007b8 <Serial_Send>
					Serial_Send("Failed");
 8000c5a:	4843      	ldr	r0, [pc, #268]	; (8000d68 <main+0x2e4>)
 8000c5c:	f7ff fdac 	bl	80007b8 <Serial_Send>
				}
			}
			I2C_Stop();
 8000c60:	f7ff fd9a 	bl	8000798 <I2C_Stop>
		}

		Buzzer(time, co2, badcrc);
 8000c64:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8000c68:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8000c72:	4619      	mov	r1, r3
 8000c74:	f8d7 04dc 	ldr.w	r0, [r7, #1244]	; 0x4dc
 8000c78:	f7ff fea4 	bl	80009c4 <Buzzer>

		HAL_Delay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f000 fc85 	bl	800158c <HAL_Delay>
		++time;
 8000c82:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8000c86:	3301      	adds	r3, #1
 8000c88:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
		++all_time;
 8000c8c:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8000c90:	3301      	adds	r3, #1
 8000c92:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
		time %= TIME_RESET;
 8000c96:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8000c9a:	4a34      	ldr	r2, [pc, #208]	; (8000d6c <main+0x2e8>)
 8000c9c:	fba2 1203 	umull	r1, r2, r2, r3
 8000ca0:	0b12      	lsrs	r2, r2, #12
 8000ca2:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ca6:	fb01 f202 	mul.w	r2, r1, r2
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000cb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb4:	482e      	ldr	r0, [pc, #184]	; (8000d70 <main+0x2ec>)
 8000cb6:	f000 fef7 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f47f af7a 	bne.w	8000bb6 <main+0x132>
			Serial_Send("Goodbye!");
 8000cc2:	482c      	ldr	r0, [pc, #176]	; (8000d74 <main+0x2f0>)
 8000cc4:	f7ff fd78 	bl	80007b8 <Serial_Send>
			for (int i = 0; i < 3; ++i) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8000cce:	e01d      	b.n	8000d0c <main+0x288>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	4820      	ldr	r0, [pc, #128]	; (8000d58 <main+0x2d4>)
 8000cd6:	f000 feff 	bl	8001ad8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period);
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <main+0x2f4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a26      	ldr	r2, [pc, #152]	; (8000d78 <main+0x2f4>)
 8000ce0:	68d2      	ldr	r2, [r2, #12]
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(50);
 8000ce4:	2032      	movs	r0, #50	; 0x32
 8000ce6:	f000 fc51 	bl	800158c <HAL_Delay>

				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2120      	movs	r1, #32
 8000cee:	481a      	ldr	r0, [pc, #104]	; (8000d58 <main+0x2d4>)
 8000cf0:	f000 fef2 	bl	8001ad8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <main+0x2f4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(50);
 8000cfc:	2032      	movs	r0, #50	; 0x32
 8000cfe:	f000 fc45 	bl	800158c <HAL_Delay>
			for (int i = 0; i < 3; ++i) {
 8000d02:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8000d06:	3301      	adds	r3, #1
 8000d08:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8000d0c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	dddd      	ble.n	8000cd0 <main+0x24c>
			}
			break;
		}
	}

	f_close(&fil);
 8000d14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f005 fd2c 	bl	8006776 <f_close>
	f_mount(NULL, "", 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	4906      	ldr	r1, [pc, #24]	; (8000d3c <main+0x2b8>)
 8000d22:	2000      	movs	r0, #0
 8000d24:	f005 f930 	bl	8005f88 <f_mount>
 8000d28:	2300      	movs	r3, #0
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	/* USER CODE END 3 */
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f507 679d 	add.w	r7, r7, #1256	; 0x4e8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08007240 	.word	0x08007240
 8000d38:	08007250 	.word	0x08007250
 8000d3c:	08007270 	.word	0x08007270
 8000d40:	08007274 	.word	0x08007274
 8000d44:	0800727c 	.word	0x0800727c
 8000d48:	08007290 	.word	0x08007290
 8000d4c:	080072a4 	.word	0x080072a4
 8000d50:	080072ac 	.word	0x080072ac
 8000d54:	080072c0 	.word	0x080072c0
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	10624dd3 	.word	0x10624dd3
 8000d60:	080072d4 	.word	0x080072d4
 8000d64:	080072e0 	.word	0x080072e0
 8000d68:	080072ec 	.word	0x080072ec
 8000d6c:	d1b71759 	.word	0xd1b71759
 8000d70:	40020800 	.word	0x40020800
 8000d74:	080072f4 	.word	0x080072f4
 8000d78:	200000e8 	.word	0x200000e8

08000d7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2230      	movs	r2, #48	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f005 fd9a 	bl	80068c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <SystemClock_Config+0xd0>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <SystemClock_Config+0xd0>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <SystemClock_Config+0xd0>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <SystemClock_Config+0xd4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc8:	4a21      	ldr	r2, [pc, #132]	; (8000e50 <SystemClock_Config+0xd4>)
 8000dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <SystemClock_Config+0xd4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de4:	2310      	movs	r3, #16
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de8:	2302      	movs	r3, #2
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dec:	2300      	movs	r3, #0
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000df0:	2310      	movs	r3, #16
 8000df2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000df4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000df8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fe80 	bl	8001b0c <HAL_RCC_OscConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x9a>
		Error_Handler();
 8000e12:	f000 f993 	bl	800113c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e26:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2102      	movs	r1, #2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 f8e2 	bl	8001ffc <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0xc6>
		Error_Handler();
 8000e3e:	f000 f97d 	bl	800113c <Error_Handler>
	}
}
 8000e42:	bf00      	nop
 8000e44:	3750      	adds	r7, #80	; 0x50
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40007000 	.word	0x40007000

08000e54 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e5a:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <MX_SPI3_Init+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e64:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e84:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e88:	2230      	movs	r2, #48	; 0x30
 8000e8a:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000ea0:	220a      	movs	r2, #10
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_SPI3_Init+0x64>)
 8000ea6:	f001 fac9 	bl	800243c <HAL_SPI_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_SPI3_Init+0x60>
		Error_Handler();
 8000eb0:	f000 f944 	bl	800113c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000090 	.word	0x20000090
 8000ebc:	40003c00 	.word	0x40003c00

08000ec0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ee2:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000ee4:	4a24      	ldr	r2, [pc, #144]	; (8000f78 <MX_TIM3_Init+0xb8>)
 8000ee6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000efa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000f08:	481a      	ldr	r0, [pc, #104]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000f0a:	f001 fd8d 	bl	8002a28 <HAL_TIM_PWM_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0x58>
		Error_Handler();
 8000f14:	f000 f912 	bl	800113c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f20:	f107 0320 	add.w	r3, r7, #32
 8000f24:	4619      	mov	r1, r3
 8000f26:	4813      	ldr	r0, [pc, #76]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000f28:	f002 f972 	bl	8003210 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8000f32:	f000 f903 	bl	800113c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f36:	2360      	movs	r3, #96	; 0x60
 8000f38:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000f4e:	f001 fe6b 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8000f58:	f000 f8f0 	bl	800113c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000f60:	f001 fdb2 	bl	8002ac8 <HAL_TIM_PWM_Start>
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MX_TIM3_Init+0xb4>)
 8000f66:	f000 f981 	bl	800126c <HAL_TIM_MspPostInit>

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000e8 	.word	0x200000e8
 8000f78:	40000400 	.word	0x40000400

08000f7c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <MX_USART2_UART_Init+0x50>)
 8000f84:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	f002 f99a 	bl	80032ec <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000fbe:	f000 f8bd 	bl	800113c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000130 	.word	0x20000130
 8000fcc:	40004400 	.word	0x40004400

08000fd0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <MX_GPIO_Init+0x158>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a4e      	ldr	r2, [pc, #312]	; (8001128 <MX_GPIO_Init+0x158>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <MX_GPIO_Init+0x158>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b48      	ldr	r3, [pc, #288]	; (8001128 <MX_GPIO_Init+0x158>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a47      	ldr	r2, [pc, #284]	; (8001128 <MX_GPIO_Init+0x158>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b45      	ldr	r3, [pc, #276]	; (8001128 <MX_GPIO_Init+0x158>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b41      	ldr	r3, [pc, #260]	; (8001128 <MX_GPIO_Init+0x158>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a40      	ldr	r2, [pc, #256]	; (8001128 <MX_GPIO_Init+0x158>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <MX_GPIO_Init+0x158>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <MX_GPIO_Init+0x158>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a39      	ldr	r2, [pc, #228]	; (8001128 <MX_GPIO_Init+0x158>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <MX_GPIO_Init+0x158>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <MX_GPIO_Init+0x158>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a32      	ldr	r2, [pc, #200]	; (8001128 <MX_GPIO_Init+0x158>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <MX_GPIO_Init+0x158>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | SOFT_SCL_Pin | SOFT_SDA_Pin,
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001078:	482c      	ldr	r0, [pc, #176]	; (800112c <MX_GPIO_Init+0x15c>)
 800107a:	f000 fd2d 	bl	8001ad8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2104      	movs	r1, #4
 8001082:	482b      	ldr	r0, [pc, #172]	; (8001130 <MX_GPIO_Init+0x160>)
 8001084:	f000 fd28 	bl	8001ad8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2108      	movs	r1, #8
 800108c:	4829      	ldr	r0, [pc, #164]	; (8001134 <MX_GPIO_Init+0x164>)
 800108e:	f000 fd23 	bl	8001ad8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001096:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001098:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800109c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4823      	ldr	r0, [pc, #140]	; (8001138 <MX_GPIO_Init+0x168>)
 80010aa:	f000 fb79 	bl	80017a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80010ae:	2320      	movs	r3, #32
 80010b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4819      	ldr	r0, [pc, #100]	; (800112c <MX_GPIO_Init+0x15c>)
 80010c6:	f000 fb6b 	bl	80017a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SOFT_SCL_Pin SOFT_SDA_Pin */
	GPIO_InitStruct.Pin = SOFT_SCL_Pin | SOFT_SDA_Pin;
 80010ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010d0:	2311      	movs	r3, #17
 80010d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <MX_GPIO_Init+0x15c>)
 80010e4:	f000 fb5c 	bl	80017a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI3_CS_Pin */
	GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80010e8:	2304      	movs	r3, #4
 80010ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_GPIO_Init+0x160>)
 8001100:	f000 fb4e 	bl	80017a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001104:	2308      	movs	r3, #8
 8001106:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_GPIO_Init+0x164>)
 800111c:	f000 fb40 	bl	80017a0 <HAL_GPIO_Init>

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800

0800113c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <HAL_MspInit+0x4c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_MspInit+0x4c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001186:	2007      	movs	r0, #7
 8001188:	f000 fad6 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <HAL_SPI_MspInit+0x84>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12c      	bne.n	8001214 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_SPI_MspInit+0x88>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_SPI_MspInit+0x88>)
 80011c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_SPI_MspInit+0x88>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_SPI_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_SPI_MspInit+0x88>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_SPI_MspInit+0x88>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001204:	2306      	movs	r3, #6
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <HAL_SPI_MspInit+0x8c>)
 8001210:	f000 fac6 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40003c00 	.word	0x40003c00
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800

08001228 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_TIM_PWM_MspInit+0x3c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10d      	bne.n	8001256 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_TIM_PWM_MspInit+0x40>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <HAL_TIM_PWM_MspInit+0x40>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <HAL_TIM_PWM_MspInit+0x40>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40000400 	.word	0x40000400
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <HAL_TIM_MspPostInit+0x68>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d11d      	bne.n	80012ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_TIM_MspPostInit+0x6c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HAL_TIM_MspPostInit+0x6c>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_TIM_MspPostInit+0x6c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZ_Pin;
 80012aa:	2310      	movs	r3, #16
 80012ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_TIM_MspPostInit+0x70>)
 80012c6:	f000 fa6b 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40000400 	.word	0x40000400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020400 	.word	0x40020400

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_UART_MspInit+0x84>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d12b      	bne.n	800135a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_UART_MspInit+0x88>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <HAL_UART_MspInit+0x88>)
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_UART_MspInit+0x88>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_UART_MspInit+0x88>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_UART_MspInit+0x88>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_UART_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800133a:	230c      	movs	r3, #12
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134a:	2307      	movs	r3, #7
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_UART_MspInit+0x8c>)
 8001356:	f000 fa23 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40004400 	.word	0x40004400
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f8c6 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f005 fa6e 	bl	80068d4 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20018000 	.word	0x20018000
 8001424:	00000400 	.word	0x00000400
 8001428:	20000174 	.word	0x20000174
 800142c:	20000310 	.word	0x20000310

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800148c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800145a:	490e      	ldr	r1, [pc, #56]	; (8001494 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001470:	4c0b      	ldr	r4, [pc, #44]	; (80014a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800147e:	f7ff ffd7 	bl	8001430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001482:	f005 fa2d 	bl	80068e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001486:	f7ff fafd 	bl	8000a84 <main>
  bx  lr    
 800148a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800148c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001498:	08007420 	.word	0x08007420
  ldr r2, =_sbss
 800149c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014a0:	2000030c 	.word	0x2000030c

080014a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC_IRQHandler>
	...

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <HAL_Init+0x40>)
 80014b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_Init+0x40>)
 80014be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_Init+0x40>)
 80014ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f931 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f808 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fe34 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023c00 	.word	0x40023c00

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x54>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x58>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f93b 	bl	8001786 <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 f911 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x5c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	20000008 	.word	0x20000008
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008
 8001570:	20000178 	.word	0x20000178

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000178 	.word	0x20000178

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_Delay+0x44>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffde 	bl	8001574 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f7ff ff8e 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff47 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff5c 	bl	800161c <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff8e 	bl	800168c <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5d 	bl	8001638 <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffb0 	bl	80016f4 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e159      	b.n	8001a70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8148 	bne.w	8001a6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d005      	beq.n	80017f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d130      	bne.n	8001854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001828:	2201      	movs	r2, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 0201 	and.w	r2, r3, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b03      	cmp	r3, #3
 800185e:	d017      	beq.n	8001890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d123      	bne.n	80018e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	69b9      	ldr	r1, [r7, #24]
 80018e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a2 	beq.w	8001a6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a56      	ldr	r2, [pc, #344]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b54      	ldr	r3, [pc, #336]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001942:	4a52      	ldr	r2, [pc, #328]	; (8001a8c <HAL_GPIO_Init+0x2ec>)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a49      	ldr	r2, [pc, #292]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d019      	beq.n	80019a2 <HAL_GPIO_Init+0x202>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <HAL_GPIO_Init+0x2f4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x1fe>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a47      	ldr	r2, [pc, #284]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x1fa>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a46      	ldr	r2, [pc, #280]	; (8001a9c <HAL_GPIO_Init+0x2fc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x1f6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a45      	ldr	r2, [pc, #276]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x1f2>
 800198e:	2304      	movs	r3, #4
 8001990:	e008      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 8001992:	2307      	movs	r3, #7
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 8001996:	2303      	movs	r3, #3
 8001998:	e004      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 800199a:	2302      	movs	r3, #2
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 80019a2:	2300      	movs	r3, #0
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f002 0203 	and.w	r2, r2, #3
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4093      	lsls	r3, r2
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b4:	4935      	ldr	r1, [pc, #212]	; (8001a8c <HAL_GPIO_Init+0x2ec>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e6:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a10:	4a24      	ldr	r2, [pc, #144]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	f67f aea2 	bls.w	80017bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40013800 	.word	0x40013800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40013c00 	.word	0x40013c00

08001aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e001      	b.n	8001aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af4:	e003      	b.n	8001afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	041a      	lsls	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	619a      	str	r2, [r3, #24]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e267      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d075      	beq.n	8001c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b2a:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d00c      	beq.n	8001b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b36:	4b85      	ldr	r3, [pc, #532]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d112      	bne.n	8001b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b42:	4b82      	ldr	r3, [pc, #520]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b4e:	d10b      	bne.n	8001b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	4b7e      	ldr	r3, [pc, #504]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d05b      	beq.n	8001c14 <HAL_RCC_OscConfig+0x108>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d157      	bne.n	8001c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e242      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b70:	d106      	bne.n	8001b80 <HAL_RCC_OscConfig+0x74>
 8001b72:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a75      	ldr	r2, [pc, #468]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e01d      	b.n	8001bbc <HAL_RCC_OscConfig+0xb0>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x98>
 8001b8a:	4b70      	ldr	r3, [pc, #448]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a6f      	ldr	r2, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6c      	ldr	r2, [pc, #432]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0xb0>
 8001ba4:	4b69      	ldr	r3, [pc, #420]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a68      	ldr	r2, [pc, #416]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a65      	ldr	r2, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fcd6 	bl	8001574 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fcd2 	bl	8001574 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e207      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b5b      	ldr	r3, [pc, #364]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0xc0>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fcc2 	bl	8001574 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fcbe 	bl	8001574 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e1f3      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	4b51      	ldr	r3, [pc, #324]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0xe8>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d063      	beq.n	8001cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d11c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3a:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d116      	bne.n	8001c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_RCC_OscConfig+0x152>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e1c7      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4937      	ldr	r1, [pc, #220]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	e03a      	b.n	8001cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_OscConfig+0x244>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7ff fc77 	bl	8001574 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fc73 	bl	8001574 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1a8      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4925      	ldr	r1, [pc, #148]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e015      	b.n	8001cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_OscConfig+0x244>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fc56 	bl	8001574 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fc52 	bl	8001574 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e187      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d036      	beq.n	8001d64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d016      	beq.n	8001d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_RCC_OscConfig+0x248>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff fc36 	bl	8001574 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fc32 	bl	8001574 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e167      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_OscConfig+0x240>)
 8001d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x200>
 8001d2a:	e01b      	b.n	8001d64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_OscConfig+0x248>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d32:	f7ff fc1f 	bl	8001574 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	e00e      	b.n	8001d58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fc1b 	bl	8001574 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d907      	bls.n	8001d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e150      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	42470000 	.word	0x42470000
 8001d54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	4b88      	ldr	r3, [pc, #544]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ea      	bne.n	8001d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8097 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b81      	ldr	r3, [pc, #516]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10f      	bne.n	8001da2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	4b7d      	ldr	r3, [pc, #500]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a7c      	ldr	r2, [pc, #496]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b7a      	ldr	r3, [pc, #488]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da2:	4b77      	ldr	r3, [pc, #476]	; (8001f80 <HAL_RCC_OscConfig+0x474>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d118      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dae:	4b74      	ldr	r3, [pc, #464]	; (8001f80 <HAL_RCC_OscConfig+0x474>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a73      	ldr	r2, [pc, #460]	; (8001f80 <HAL_RCC_OscConfig+0x474>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fbdb 	bl	8001574 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7ff fbd7 	bl	8001574 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e10c      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	4b6a      	ldr	r3, [pc, #424]	; (8001f80 <HAL_RCC_OscConfig+0x474>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x2ea>
 8001de8:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	4a63      	ldr	r2, [pc, #396]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6713      	str	r3, [r2, #112]	; 0x70
 8001df4:	e01c      	b.n	8001e30 <HAL_RCC_OscConfig+0x324>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x30c>
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a5e      	ldr	r2, [pc, #376]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0a:	4b5c      	ldr	r3, [pc, #368]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	4a5b      	ldr	r2, [pc, #364]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6713      	str	r3, [r2, #112]	; 0x70
 8001e16:	e00b      	b.n	8001e30 <HAL_RCC_OscConfig+0x324>
 8001e18:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a57      	ldr	r2, [pc, #348]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	4b55      	ldr	r3, [pc, #340]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	4a54      	ldr	r2, [pc, #336]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e2a:	f023 0304 	bic.w	r3, r3, #4
 8001e2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d015      	beq.n	8001e64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff fb9c 	bl	8001574 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7ff fb98 	bl	8001574 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e0cb      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0ee      	beq.n	8001e40 <HAL_RCC_OscConfig+0x334>
 8001e62:	e014      	b.n	8001e8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e64:	f7ff fb86 	bl	8001574 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fb82 	bl	8001574 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e0b5      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e82:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1ee      	bne.n	8001e6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d105      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e94:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	4a38      	ldr	r2, [pc, #224]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a1 	beq.w	8001fec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eaa:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d05c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d141      	bne.n	8001f42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <HAL_RCC_OscConfig+0x478>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fb56 	bl	8001574 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff fb52 	bl	8001574 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e087      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	019b      	lsls	r3, r3, #6
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	085b      	lsrs	r3, r3, #1
 8001f02:	3b01      	subs	r3, #1
 8001f04:	041b      	lsls	r3, r3, #16
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	061b      	lsls	r3, r3, #24
 8001f0e:	491b      	ldr	r1, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_RCC_OscConfig+0x478>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fb2b 	bl	8001574 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff fb27 	bl	8001574 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e05c      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x416>
 8001f40:	e054      	b.n	8001fec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_RCC_OscConfig+0x478>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fb14 	bl	8001574 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff fb10 	bl	8001574 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e045      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_OscConfig+0x470>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x444>
 8001f6e:	e03d      	b.n	8001fec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e038      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40007000 	.word	0x40007000
 8001f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x4ec>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d028      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d121      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d11a      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fb8:	4013      	ands	r3, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d111      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0cc      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002010:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d90c      	bls.n	8002038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b65      	ldr	r3, [pc, #404]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b8      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800205a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002068:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	494d      	ldr	r1, [pc, #308]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d044      	beq.n	800211c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d119      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ba:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e06f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e067      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020da:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f023 0203 	bic.w	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4934      	ldr	r1, [pc, #208]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ec:	f7ff fa42 	bl	8001574 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	e00a      	b.n	800210a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f4:	f7ff fa3e 	bl	8001574 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e04f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 020c 	and.w	r2, r3, #12
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	429a      	cmp	r2, r3
 800211a:	d1eb      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d20c      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e032      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4916      	ldr	r1, [pc, #88]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002182:	f000 f821 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8002186:	4602      	mov	r2, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	490a      	ldr	r1, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	5ccb      	ldrb	r3, [r1, r3]
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f9a2 	bl	80014ec <HAL_InitTick>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00
 80021b8:	40023800 	.word	0x40023800
 80021bc:	08007344 	.word	0x08007344
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021cc:	b094      	sub	sp, #80	; 0x50
 80021ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	647b      	str	r3, [r7, #68]	; 0x44
 80021d4:	2300      	movs	r3, #0
 80021d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021d8:	2300      	movs	r3, #0
 80021da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e0:	4b79      	ldr	r3, [pc, #484]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d00d      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x40>
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	f200 80e1 	bhi.w	80023b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x34>
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0x3a>
 80021fa:	e0db      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021fc:	4b73      	ldr	r3, [pc, #460]	; (80023cc <HAL_RCC_GetSysClockFreq+0x204>)
 80021fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002200:	e0db      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002206:	e0d8      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002208:	4b6f      	ldr	r3, [pc, #444]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002210:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002212:	4b6d      	ldr	r3, [pc, #436]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d063      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221e:	4b6a      	ldr	r3, [pc, #424]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	099b      	lsrs	r3, r3, #6
 8002224:	2200      	movs	r2, #0
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
 8002228:	63fa      	str	r2, [r7, #60]	; 0x3c
 800222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
 8002232:	2300      	movs	r3, #0
 8002234:	637b      	str	r3, [r7, #52]	; 0x34
 8002236:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800223a:	4622      	mov	r2, r4
 800223c:	462b      	mov	r3, r5
 800223e:	f04f 0000 	mov.w	r0, #0
 8002242:	f04f 0100 	mov.w	r1, #0
 8002246:	0159      	lsls	r1, r3, #5
 8002248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800224c:	0150      	lsls	r0, r2, #5
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4621      	mov	r1, r4
 8002254:	1a51      	subs	r1, r2, r1
 8002256:	6139      	str	r1, [r7, #16]
 8002258:	4629      	mov	r1, r5
 800225a:	eb63 0301 	sbc.w	r3, r3, r1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800226c:	4659      	mov	r1, fp
 800226e:	018b      	lsls	r3, r1, #6
 8002270:	4651      	mov	r1, sl
 8002272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002276:	4651      	mov	r1, sl
 8002278:	018a      	lsls	r2, r1, #6
 800227a:	4651      	mov	r1, sl
 800227c:	ebb2 0801 	subs.w	r8, r2, r1
 8002280:	4659      	mov	r1, fp
 8002282:	eb63 0901 	sbc.w	r9, r3, r1
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800229a:	4690      	mov	r8, r2
 800229c:	4699      	mov	r9, r3
 800229e:	4623      	mov	r3, r4
 80022a0:	eb18 0303 	adds.w	r3, r8, r3
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	462b      	mov	r3, r5
 80022a8:	eb49 0303 	adc.w	r3, r9, r3
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ba:	4629      	mov	r1, r5
 80022bc:	024b      	lsls	r3, r1, #9
 80022be:	4621      	mov	r1, r4
 80022c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022c4:	4621      	mov	r1, r4
 80022c6:	024a      	lsls	r2, r1, #9
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ce:	2200      	movs	r2, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022d8:	f7fd ffda 	bl	8000290 <__aeabi_uldivmod>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4613      	mov	r3, r2
 80022e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e4:	e058      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	099b      	lsrs	r3, r3, #6
 80022ec:	2200      	movs	r2, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	4611      	mov	r1, r2
 80022f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022f6:	623b      	str	r3, [r7, #32]
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
 80022fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002300:	4642      	mov	r2, r8
 8002302:	464b      	mov	r3, r9
 8002304:	f04f 0000 	mov.w	r0, #0
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	0159      	lsls	r1, r3, #5
 800230e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002312:	0150      	lsls	r0, r2, #5
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4641      	mov	r1, r8
 800231a:	ebb2 0a01 	subs.w	sl, r2, r1
 800231e:	4649      	mov	r1, r9
 8002320:	eb63 0b01 	sbc.w	fp, r3, r1
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002330:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002334:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002338:	ebb2 040a 	subs.w	r4, r2, sl
 800233c:	eb63 050b 	sbc.w	r5, r3, fp
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	00eb      	lsls	r3, r5, #3
 800234a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800234e:	00e2      	lsls	r2, r4, #3
 8002350:	4614      	mov	r4, r2
 8002352:	461d      	mov	r5, r3
 8002354:	4643      	mov	r3, r8
 8002356:	18e3      	adds	r3, r4, r3
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	464b      	mov	r3, r9
 800235c:	eb45 0303 	adc.w	r3, r5, r3
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800236e:	4629      	mov	r1, r5
 8002370:	028b      	lsls	r3, r1, #10
 8002372:	4621      	mov	r1, r4
 8002374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002378:	4621      	mov	r1, r4
 800237a:	028a      	lsls	r2, r1, #10
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002382:	2200      	movs	r2, #0
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	61fa      	str	r2, [r7, #28]
 8002388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800238c:	f7fd ff80 	bl	8000290 <__aeabi_uldivmod>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4613      	mov	r3, r2
 8002396:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	3301      	adds	r3, #1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023b2:	e002      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetSysClockFreq+0x204>)
 80023b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3750      	adds	r7, #80	; 0x50
 80023c0:	46bd      	mov	sp, r7
 80023c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	007a1200 	.word	0x007a1200

080023d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000000 	.word	0x20000000

080023ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023f0:	f7ff fff0 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0a9b      	lsrs	r3, r3, #10
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4903      	ldr	r1, [pc, #12]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	08007354 	.word	0x08007354

08002414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002418:	f7ff ffdc 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	0b5b      	lsrs	r3, r3, #13
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	08007354 	.word	0x08007354

0800243c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07b      	b.n	8002546 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800245e:	d009      	beq.n	8002474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
 8002466:	e005      	b.n	8002474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fe82 	bl	8001198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	ea42 0103 	orr.w	r1, r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	f003 0104 	and.w	r1, r3, #4
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f003 0210 	and.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69da      	ldr	r2, [r3, #28]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b08c      	sub	sp, #48	; 0x30
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800255c:	2301      	movs	r3, #1
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x26>
 8002570:	2302      	movs	r3, #2
 8002572:	e18a      	b.n	800288a <HAL_SPI_TransmitReceive+0x33c>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800257c:	f7fe fffa 	bl	8001574 <HAL_GetTick>
 8002580:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002596:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800259a:	2b01      	cmp	r3, #1
 800259c:	d00f      	beq.n	80025be <HAL_SPI_TransmitReceive+0x70>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025a4:	d107      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x68>
 80025ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d003      	beq.n	80025be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025bc:	e15b      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x82>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x82>
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025d6:	e14e      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d003      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2205      	movs	r2, #5
 80025e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	887a      	ldrh	r2, [r7, #2]
 8002602:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	887a      	ldrh	r2, [r7, #2]
 800260e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d007      	beq.n	8002640 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002648:	d178      	bne.n	800273c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x10a>
 8002652:	8b7b      	ldrh	r3, [r7, #26]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d166      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	881a      	ldrh	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	1c9a      	adds	r2, r3, #2
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800267c:	e053      	b.n	8002726 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d11b      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x176>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_SPI_TransmitReceive+0x176>
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d113      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	881a      	ldrh	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	1c9a      	adds	r2, r3, #2
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d119      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x1b8>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d014      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	b292      	uxth	r2, r2
 80026e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	1c9a      	adds	r2, r3, #2
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002702:	2301      	movs	r3, #1
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002706:	f7fe ff35 	bl	8001574 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002712:	429a      	cmp	r2, r3
 8002714:	d807      	bhi.n	8002726 <HAL_SPI_TransmitReceive+0x1d8>
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d003      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002724:	e0a7      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1a6      	bne.n	800267e <HAL_SPI_TransmitReceive+0x130>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1a1      	bne.n	800267e <HAL_SPI_TransmitReceive+0x130>
 800273a:	e07c      	b.n	8002836 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_SPI_TransmitReceive+0x1fc>
 8002744:	8b7b      	ldrh	r3, [r7, #26]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d16b      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	7812      	ldrb	r2, [r2, #0]
 8002756:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002770:	e057      	b.n	8002822 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d11c      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x26c>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d017      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x26c>
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d114      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d119      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x2ae>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d014      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027f8:	2301      	movs	r3, #1
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027fc:	f7fe feba 	bl	8001574 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002808:	429a      	cmp	r2, r3
 800280a:	d803      	bhi.n	8002814 <HAL_SPI_TransmitReceive+0x2c6>
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d102      	bne.n	800281a <HAL_SPI_TransmitReceive+0x2cc>
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002820:	e029      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1a2      	bne.n	8002772 <HAL_SPI_TransmitReceive+0x224>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d19d      	bne.n	8002772 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f8b2 	bl	80029a4 <SPI_EndRxTxTransaction>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002852:	e010      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	e000      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002874:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002886:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800288a:	4618      	mov	r0, r3
 800288c:	3730      	adds	r7, #48	; 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028a4:	f7fe fe66 	bl	8001574 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028b4:	f7fe fe5e 	bl	8001574 <HAL_GetTick>
 80028b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	015b      	lsls	r3, r3, #5
 80028c0:	0d1b      	lsrs	r3, r3, #20
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ca:	e054      	b.n	8002976 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d050      	beq.n	8002976 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028d4:	f7fe fe4e 	bl	8001574 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d902      	bls.n	80028ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d13d      	bne.n	8002966 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002902:	d111      	bne.n	8002928 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290c:	d004      	beq.n	8002918 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d107      	bne.n	8002928 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002926:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002930:	d10f      	bne.n	8002952 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002950:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e017      	b.n	8002996 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3b01      	subs	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	429a      	cmp	r2, r3
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d19b      	bne.n	80028cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000000 	.word	0x20000000

080029a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <SPI_EndRxTxTransaction+0x7c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <SPI_EndRxTxTransaction+0x80>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ce:	d112      	bne.n	80029f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f7ff ff5a 	bl	8002894 <SPI_WaitFlagStateUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e00f      	b.n	8002a16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b80      	cmp	r3, #128	; 0x80
 8002a0e:	d0f2      	beq.n	80029f6 <SPI_EndRxTxTransaction+0x52>
 8002a10:	e000      	b.n	8002a14 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a12:	bf00      	nop
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000000 	.word	0x20000000
 8002a24:	165e9f81 	.word	0x165e9f81

08002a28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e041      	b.n	8002abe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe fbea 	bl	8001228 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f000 f9a0 	bl	8002dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_TIM_PWM_Start+0x24>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e022      	b.n	8002b32 <HAL_TIM_PWM_Start+0x6a>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d109      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x3e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	bf14      	ite	ne
 8002afe:	2301      	movne	r3, #1
 8002b00:	2300      	moveq	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	e015      	b.n	8002b32 <HAL_TIM_PWM_Start+0x6a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d109      	bne.n	8002b20 <HAL_TIM_PWM_Start+0x58>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e008      	b.n	8002b32 <HAL_TIM_PWM_Start+0x6a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e068      	b.n	8002c0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x82>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b48:	e013      	b.n	8002b72 <HAL_TIM_PWM_Start+0xaa>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_PWM_Start+0x92>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b58:	e00b      	b.n	8002b72 <HAL_TIM_PWM_Start+0xaa>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d104      	bne.n	8002b6a <HAL_TIM_PWM_Start+0xa2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b68:	e003      	b.n	8002b72 <HAL_TIM_PWM_Start+0xaa>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fb22 	bl	80031c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a23      	ldr	r2, [pc, #140]	; (8002c14 <HAL_TIM_PWM_Start+0x14c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <HAL_TIM_PWM_Start+0x14c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d018      	beq.n	8002bd6 <HAL_TIM_PWM_Start+0x10e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d013      	beq.n	8002bd6 <HAL_TIM_PWM_Start+0x10e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <HAL_TIM_PWM_Start+0x150>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_TIM_PWM_Start+0x10e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <HAL_TIM_PWM_Start+0x154>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d009      	beq.n	8002bd6 <HAL_TIM_PWM_Start+0x10e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <HAL_TIM_PWM_Start+0x158>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_TIM_PWM_Start+0x10e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <HAL_TIM_PWM_Start+0x15c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d111      	bne.n	8002bfa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b06      	cmp	r3, #6
 8002be6:	d010      	beq.n	8002c0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf8:	e007      	b.n	8002c0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800
 8002c20:	40000c00 	.word	0x40000c00
 8002c24:	40014000 	.word	0x40014000

08002c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0ae      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	f200 809f 	bhi.w	8002d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c91 	.word	0x08002c91
 8002c60:	08002d95 	.word	0x08002d95
 8002c64:	08002d95 	.word	0x08002d95
 8002c68:	08002d95 	.word	0x08002d95
 8002c6c:	08002cd1 	.word	0x08002cd1
 8002c70:	08002d95 	.word	0x08002d95
 8002c74:	08002d95 	.word	0x08002d95
 8002c78:	08002d95 	.word	0x08002d95
 8002c7c:	08002d13 	.word	0x08002d13
 8002c80:	08002d95 	.word	0x08002d95
 8002c84:	08002d95 	.word	0x08002d95
 8002c88:	08002d95 	.word	0x08002d95
 8002c8c:	08002d53 	.word	0x08002d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f908 	bl	8002eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0204 	bic.w	r2, r2, #4
 8002cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6999      	ldr	r1, [r3, #24]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	619a      	str	r2, [r3, #24]
      break;
 8002cce:	e064      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f94e 	bl	8002f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6999      	ldr	r1, [r3, #24]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	021a      	lsls	r2, r3, #8
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	619a      	str	r2, [r3, #24]
      break;
 8002d10:	e043      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f999 	bl	8003050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0208 	orr.w	r2, r2, #8
 8002d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69da      	ldr	r2, [r3, #28]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0204 	bic.w	r2, r2, #4
 8002d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69d9      	ldr	r1, [r3, #28]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	61da      	str	r2, [r3, #28]
      break;
 8002d50:	e023      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f9e3 	bl	8003124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69d9      	ldr	r1, [r3, #28]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	021a      	lsls	r2, r3, #8
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	61da      	str	r2, [r3, #28]
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
      break;
 8002d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a34      	ldr	r2, [pc, #208]	; (8002e90 <TIM_Base_SetConfig+0xe4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00f      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dca:	d00b      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a31      	ldr	r2, [pc, #196]	; (8002e94 <TIM_Base_SetConfig+0xe8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a30      	ldr	r2, [pc, #192]	; (8002e98 <TIM_Base_SetConfig+0xec>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d003      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a2f      	ldr	r2, [pc, #188]	; (8002e9c <TIM_Base_SetConfig+0xf0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d108      	bne.n	8002df6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a25      	ldr	r2, [pc, #148]	; (8002e90 <TIM_Base_SetConfig+0xe4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01b      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e04:	d017      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <TIM_Base_SetConfig+0xe8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <TIM_Base_SetConfig+0xec>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00f      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <TIM_Base_SetConfig+0xf0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00b      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <TIM_Base_SetConfig+0xf4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <TIM_Base_SetConfig+0xf8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <TIM_Base_SetConfig+0xfc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d108      	bne.n	8002e48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <TIM_Base_SetConfig+0xe4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d103      	bne.n	8002e7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	615a      	str	r2, [r3, #20]
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40014400 	.word	0x40014400
 8002ea8:	40014800 	.word	0x40014800

08002eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0303 	bic.w	r3, r3, #3
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f023 0302 	bic.w	r3, r3, #2
 8002ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <TIM_OC1_SetConfig+0xc8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10c      	bne.n	8002f22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0308 	bic.w	r3, r3, #8
 8002f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <TIM_OC1_SetConfig+0xc8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d111      	bne.n	8002f4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40010000 	.word	0x40010000

08002f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0210 	bic.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0320 	bic.w	r3, r3, #32
 8002fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	; (800304c <TIM_OC2_SetConfig+0xd4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10d      	bne.n	8002ff4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <TIM_OC2_SetConfig+0xd4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d113      	bne.n	8003024 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800300a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	621a      	str	r2, [r3, #32]
}
 800303e:	bf00      	nop
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40010000 	.word	0x40010000

08003050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <TIM_OC3_SetConfig+0xd0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10d      	bne.n	80030ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <TIM_OC3_SetConfig+0xd0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d113      	bne.n	80030fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	621a      	str	r2, [r3, #32]
}
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40010000 	.word	0x40010000

08003124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800316e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	031b      	lsls	r3, r3, #12
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <TIM_OC4_SetConfig+0x9c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d109      	bne.n	8003198 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800318a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40010000 	.word	0x40010000

080031c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2201      	movs	r2, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a1a      	ldr	r2, [r3, #32]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	621a      	str	r2, [r3, #32]
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003224:	2302      	movs	r3, #2
 8003226:	e050      	b.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d018      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003274:	d013      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a18      	ldr	r2, [pc, #96]	; (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10c      	bne.n	80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40010000 	.word	0x40010000
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800
 80032e4:	40000c00 	.word	0x40000c00
 80032e8:	40014000 	.word	0x40014000

080032ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e03f      	b.n	800337e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd ffe4 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f929 	bl	8003588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b08a      	sub	sp, #40	; 0x28
 800338a:	af02      	add	r7, sp, #8
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d17c      	bne.n	80034a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_UART_Transmit+0x2c>
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e075      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_UART_Transmit+0x3e>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e06e      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2221      	movs	r2, #33	; 0x21
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033da:	f7fe f8cb 	bl	8001574 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	88fa      	ldrh	r2, [r7, #6]
 80033ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f4:	d108      	bne.n	8003408 <HAL_UART_Transmit+0x82>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e003      	b.n	8003410 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800340c:	2300      	movs	r3, #0
 800340e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003418:	e02a      	b.n	8003470 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2200      	movs	r2, #0
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f840 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e036      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003448:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3302      	adds	r3, #2
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e007      	b.n	8003462 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	3301      	adds	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1cf      	bne.n	800341a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2200      	movs	r2, #0
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f810 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e006      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b090      	sub	sp, #64	; 0x40
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ba:	e050      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d04c      	beq.n	800355e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0x30>
 80034ca:	f7fe f853 	bl	8001574 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d241      	bcs.n	800355e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034fa:	637a      	str	r2, [r7, #52]	; 0x34
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e5      	bne.n	80034da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3314      	adds	r3, #20
 8003514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	613b      	str	r3, [r7, #16]
   return(result);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	63bb      	str	r3, [r7, #56]	; 0x38
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800352e:	623a      	str	r2, [r7, #32]
 8003530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	69f9      	ldr	r1, [r7, #28]
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	61bb      	str	r3, [r7, #24]
   return(result);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e5      	bne.n	800350e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e00f      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4013      	ands	r3, r2
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	bf0c      	ite	eq
 800356e:	2301      	moveq	r3, #1
 8003570:	2300      	movne	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	429a      	cmp	r2, r3
 800357a:	d09f      	beq.n	80034bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3740      	adds	r7, #64	; 0x40
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800358c:	b0c0      	sub	sp, #256	; 0x100
 800358e:	af00      	add	r7, sp, #0
 8003590:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	68d9      	ldr	r1, [r3, #12]
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	ea40 0301 	orr.w	r3, r0, r1
 80035b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	431a      	orrs	r2, r3
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035e0:	f021 010c 	bic.w	r1, r1, #12
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035ee:	430b      	orrs	r3, r1
 80035f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003602:	6999      	ldr	r1, [r3, #24]
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	ea40 0301 	orr.w	r3, r0, r1
 800360e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b8f      	ldr	r3, [pc, #572]	; (8003854 <UART_SetConfig+0x2cc>)
 8003618:	429a      	cmp	r2, r3
 800361a:	d005      	beq.n	8003628 <UART_SetConfig+0xa0>
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b8d      	ldr	r3, [pc, #564]	; (8003858 <UART_SetConfig+0x2d0>)
 8003624:	429a      	cmp	r2, r3
 8003626:	d104      	bne.n	8003632 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7fe fef4 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 800362c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003630:	e003      	b.n	800363a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003632:	f7fe fedb 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003636:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	f040 810c 	bne.w	8003860 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003652:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003656:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	1891      	adds	r1, r2, r2
 8003660:	65b9      	str	r1, [r7, #88]	; 0x58
 8003662:	415b      	adcs	r3, r3
 8003664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800366a:	4621      	mov	r1, r4
 800366c:	eb12 0801 	adds.w	r8, r2, r1
 8003670:	4629      	mov	r1, r5
 8003672:	eb43 0901 	adc.w	r9, r3, r1
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800368a:	4690      	mov	r8, r2
 800368c:	4699      	mov	r9, r3
 800368e:	4623      	mov	r3, r4
 8003690:	eb18 0303 	adds.w	r3, r8, r3
 8003694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003698:	462b      	mov	r3, r5
 800369a:	eb49 0303 	adc.w	r3, r9, r3
 800369e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036b6:	460b      	mov	r3, r1
 80036b8:	18db      	adds	r3, r3, r3
 80036ba:	653b      	str	r3, [r7, #80]	; 0x50
 80036bc:	4613      	mov	r3, r2
 80036be:	eb42 0303 	adc.w	r3, r2, r3
 80036c2:	657b      	str	r3, [r7, #84]	; 0x54
 80036c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036cc:	f7fc fde0 	bl	8000290 <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4b61      	ldr	r3, [pc, #388]	; (800385c <UART_SetConfig+0x2d4>)
 80036d6:	fba3 2302 	umull	r2, r3, r3, r2
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	011c      	lsls	r4, r3, #4
 80036de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036f0:	4642      	mov	r2, r8
 80036f2:	464b      	mov	r3, r9
 80036f4:	1891      	adds	r1, r2, r2
 80036f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80036f8:	415b      	adcs	r3, r3
 80036fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003700:	4641      	mov	r1, r8
 8003702:	eb12 0a01 	adds.w	sl, r2, r1
 8003706:	4649      	mov	r1, r9
 8003708:	eb43 0b01 	adc.w	fp, r3, r1
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003718:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800371c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003720:	4692      	mov	sl, r2
 8003722:	469b      	mov	fp, r3
 8003724:	4643      	mov	r3, r8
 8003726:	eb1a 0303 	adds.w	r3, sl, r3
 800372a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800372e:	464b      	mov	r3, r9
 8003730:	eb4b 0303 	adc.w	r3, fp, r3
 8003734:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003744:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003748:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800374c:	460b      	mov	r3, r1
 800374e:	18db      	adds	r3, r3, r3
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
 8003752:	4613      	mov	r3, r2
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	647b      	str	r3, [r7, #68]	; 0x44
 800375a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800375e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003762:	f7fc fd95 	bl	8000290 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4611      	mov	r1, r2
 800376c:	4b3b      	ldr	r3, [pc, #236]	; (800385c <UART_SetConfig+0x2d4>)
 800376e:	fba3 2301 	umull	r2, r3, r3, r1
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2264      	movs	r2, #100	; 0x64
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	1acb      	subs	r3, r1, r3
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <UART_SetConfig+0x2d4>)
 8003784:	fba3 2302 	umull	r2, r3, r3, r2
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003790:	441c      	add	r4, r3
 8003792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800379c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037a4:	4642      	mov	r2, r8
 80037a6:	464b      	mov	r3, r9
 80037a8:	1891      	adds	r1, r2, r2
 80037aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80037ac:	415b      	adcs	r3, r3
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037b4:	4641      	mov	r1, r8
 80037b6:	1851      	adds	r1, r2, r1
 80037b8:	6339      	str	r1, [r7, #48]	; 0x30
 80037ba:	4649      	mov	r1, r9
 80037bc:	414b      	adcs	r3, r1
 80037be:	637b      	str	r3, [r7, #52]	; 0x34
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037cc:	4659      	mov	r1, fp
 80037ce:	00cb      	lsls	r3, r1, #3
 80037d0:	4651      	mov	r1, sl
 80037d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d6:	4651      	mov	r1, sl
 80037d8:	00ca      	lsls	r2, r1, #3
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	4642      	mov	r2, r8
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037e8:	464b      	mov	r3, r9
 80037ea:	460a      	mov	r2, r1
 80037ec:	eb42 0303 	adc.w	r3, r2, r3
 80037f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003800:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003804:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003808:	460b      	mov	r3, r1
 800380a:	18db      	adds	r3, r3, r3
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
 800380e:	4613      	mov	r3, r2
 8003810:	eb42 0303 	adc.w	r3, r2, r3
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800381a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800381e:	f7fc fd37 	bl	8000290 <__aeabi_uldivmod>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <UART_SetConfig+0x2d4>)
 8003828:	fba3 1302 	umull	r1, r3, r3, r2
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	2164      	movs	r1, #100	; 0x64
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	3332      	adds	r3, #50	; 0x32
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <UART_SetConfig+0x2d4>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	f003 0207 	and.w	r2, r3, #7
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4422      	add	r2, r4
 800384e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003850:	e106      	b.n	8003a60 <UART_SetConfig+0x4d8>
 8003852:	bf00      	nop
 8003854:	40011000 	.word	0x40011000
 8003858:	40011400 	.word	0x40011400
 800385c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003864:	2200      	movs	r2, #0
 8003866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800386a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800386e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003872:	4642      	mov	r2, r8
 8003874:	464b      	mov	r3, r9
 8003876:	1891      	adds	r1, r2, r2
 8003878:	6239      	str	r1, [r7, #32]
 800387a:	415b      	adcs	r3, r3
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003882:	4641      	mov	r1, r8
 8003884:	1854      	adds	r4, r2, r1
 8003886:	4649      	mov	r1, r9
 8003888:	eb43 0501 	adc.w	r5, r3, r1
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	00eb      	lsls	r3, r5, #3
 8003896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800389a:	00e2      	lsls	r2, r4, #3
 800389c:	4614      	mov	r4, r2
 800389e:	461d      	mov	r5, r3
 80038a0:	4643      	mov	r3, r8
 80038a2:	18e3      	adds	r3, r4, r3
 80038a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038a8:	464b      	mov	r3, r9
 80038aa:	eb45 0303 	adc.w	r3, r5, r3
 80038ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038ce:	4629      	mov	r1, r5
 80038d0:	008b      	lsls	r3, r1, #2
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d8:	4621      	mov	r1, r4
 80038da:	008a      	lsls	r2, r1, #2
 80038dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038e0:	f7fc fcd6 	bl	8000290 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4b60      	ldr	r3, [pc, #384]	; (8003a6c <UART_SetConfig+0x4e4>)
 80038ea:	fba3 2302 	umull	r2, r3, r3, r2
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	011c      	lsls	r4, r3, #4
 80038f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003900:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	1891      	adds	r1, r2, r2
 800390a:	61b9      	str	r1, [r7, #24]
 800390c:	415b      	adcs	r3, r3
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003914:	4641      	mov	r1, r8
 8003916:	1851      	adds	r1, r2, r1
 8003918:	6139      	str	r1, [r7, #16]
 800391a:	4649      	mov	r1, r9
 800391c:	414b      	adcs	r3, r1
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800392c:	4659      	mov	r1, fp
 800392e:	00cb      	lsls	r3, r1, #3
 8003930:	4651      	mov	r1, sl
 8003932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003936:	4651      	mov	r1, sl
 8003938:	00ca      	lsls	r2, r1, #3
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	4603      	mov	r3, r0
 8003940:	4642      	mov	r2, r8
 8003942:	189b      	adds	r3, r3, r2
 8003944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003948:	464b      	mov	r3, r9
 800394a:	460a      	mov	r2, r1
 800394c:	eb42 0303 	adc.w	r3, r2, r3
 8003950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	67bb      	str	r3, [r7, #120]	; 0x78
 800395e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800396c:	4649      	mov	r1, r9
 800396e:	008b      	lsls	r3, r1, #2
 8003970:	4641      	mov	r1, r8
 8003972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003976:	4641      	mov	r1, r8
 8003978:	008a      	lsls	r2, r1, #2
 800397a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800397e:	f7fc fc87 	bl	8000290 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4611      	mov	r1, r2
 8003988:	4b38      	ldr	r3, [pc, #224]	; (8003a6c <UART_SetConfig+0x4e4>)
 800398a:	fba3 2301 	umull	r2, r3, r3, r1
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	1acb      	subs	r3, r1, r3
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	3332      	adds	r3, #50	; 0x32
 800399c:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <UART_SetConfig+0x4e4>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a8:	441c      	add	r4, r3
 80039aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ae:	2200      	movs	r2, #0
 80039b0:	673b      	str	r3, [r7, #112]	; 0x70
 80039b2:	677a      	str	r2, [r7, #116]	; 0x74
 80039b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039b8:	4642      	mov	r2, r8
 80039ba:	464b      	mov	r3, r9
 80039bc:	1891      	adds	r1, r2, r2
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	415b      	adcs	r3, r3
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039c8:	4641      	mov	r1, r8
 80039ca:	1851      	adds	r1, r2, r1
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	4649      	mov	r1, r9
 80039d0:	414b      	adcs	r3, r1
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039e0:	4659      	mov	r1, fp
 80039e2:	00cb      	lsls	r3, r1, #3
 80039e4:	4651      	mov	r1, sl
 80039e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ea:	4651      	mov	r1, sl
 80039ec:	00ca      	lsls	r2, r1, #3
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	4642      	mov	r2, r8
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039fa:	464b      	mov	r3, r9
 80039fc:	460a      	mov	r2, r1
 80039fe:	eb42 0303 	adc.w	r3, r2, r3
 8003a02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a0e:	667a      	str	r2, [r7, #100]	; 0x64
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	008b      	lsls	r3, r1, #2
 8003a20:	4641      	mov	r1, r8
 8003a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a26:	4641      	mov	r1, r8
 8003a28:	008a      	lsls	r2, r1, #2
 8003a2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a2e:	f7fc fc2f 	bl	8000290 <__aeabi_uldivmod>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <UART_SetConfig+0x4e4>)
 8003a38:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	2164      	movs	r1, #100	; 0x64
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	3332      	adds	r3, #50	; 0x32
 8003a4a:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <UART_SetConfig+0x4e4>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4422      	add	r2, r4
 8003a5e:	609a      	str	r2, [r3, #8]
}
 8003a60:	bf00      	nop
 8003a62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a66:	46bd      	mov	sp, r7
 8003a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6c:	51eb851f 	.word	0x51eb851f

08003a70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003a74:	4904      	ldr	r1, [pc, #16]	; (8003a88 <MX_FATFS_Init+0x18>)
 8003a76:	4805      	ldr	r0, [pc, #20]	; (8003a8c <MX_FATFS_Init+0x1c>)
 8003a78:	f002 fef4 	bl	8006864 <FATFS_LinkDriver>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <MX_FATFS_Init+0x20>)
 8003a82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000180 	.word	0x20000180
 8003a8c:	2000000c 	.word	0x2000000c
 8003a90:	2000017c 	.word	0x2000017c

08003a94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003a98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f9d9 	bl	8003e68 <USER_SPI_initialize>
 8003ab6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fab7 	bl	8004040 <USER_SPI_status>
 8003ad2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8003aec:	7bf8      	ldrb	r0, [r7, #15]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	f000 faba 	bl	800406c <USER_SPI_read>
 8003af8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8003b12:	7bf8      	ldrb	r0, [r7, #15]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	f000 fb0d 	bl	8004138 <USER_SPI_write>
 8003b1e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	603a      	str	r2, [r7, #0]
 8003b32:	71fb      	strb	r3, [r7, #7]
 8003b34:	460b      	mov	r3, r1
 8003b36:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8003b38:	79b9      	ldrb	r1, [r7, #6]
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fb76 	bl	8004230 <USER_SPI_ioctl>
 8003b44:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003b58:	f7fd fd0c 	bl	8001574 <HAL_GetTick>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <SPI_Timer_On+0x20>)
 8003b60:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003b62:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <SPI_Timer_On+0x24>)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000188 	.word	0x20000188
 8003b74:	2000018c 	.word	0x2000018c

08003b78 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003b7c:	f7fd fcfa 	bl	8001574 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <SPI_Timer_Status+0x24>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <SPI_Timer_Status+0x28>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	bf34      	ite	cc
 8003b90:	2301      	movcc	r3, #1
 8003b92:	2300      	movcs	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000188 	.word	0x20000188
 8003ba0:	2000018c 	.word	0x2000018c

08003ba4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	4603      	mov	r3, r0
 8003bac:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003bae:	f107 020f 	add.w	r2, r7, #15
 8003bb2:	1df9      	adds	r1, r7, #7
 8003bb4:	2332      	movs	r3, #50	; 0x32
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	4804      	ldr	r0, [pc, #16]	; (8003bcc <xchg_spi+0x28>)
 8003bbc:	f7fe fcc7 	bl	800254e <HAL_SPI_TransmitReceive>
    return rxDat;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000090 	.word	0x20000090

08003bd0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e00a      	b.n	8003bf6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	18d4      	adds	r4, r2, r3
 8003be6:	20ff      	movs	r0, #255	; 0xff
 8003be8:	f7ff ffdc 	bl	8003ba4 <xchg_spi>
 8003bec:	4603      	mov	r3, r0
 8003bee:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3f0      	bcc.n	8003be0 <rcvr_spi_multi+0x10>
	}
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd90      	pop	{r4, r7, pc}

08003c08 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e009      	b.n	8003c2c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ffbf 	bl	8003ba4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d3f1      	bcc.n	8003c18 <xmit_spi_multi+0x10>
	}
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003c46:	f7fd fc95 	bl	8001574 <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003c50:	20ff      	movs	r0, #255	; 0xff
 8003c52:	f7ff ffa7 	bl	8003ba4 <xchg_spi>
 8003c56:	4603      	mov	r3, r0
 8003c58:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2bff      	cmp	r3, #255	; 0xff
 8003c5e:	d007      	beq.n	8003c70 <wait_ready+0x32>
 8003c60:	f7fd fc88 	bl	8001574 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d8ef      	bhi.n	8003c50 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2bff      	cmp	r3, #255	; 0xff
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003c88:	2201      	movs	r2, #1
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	4803      	ldr	r0, [pc, #12]	; (8003c9c <despiselect+0x18>)
 8003c8e:	f7fd ff23 	bl	8001ad8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003c92:	20ff      	movs	r0, #255	; 0xff
 8003c94:	f7ff ff86 	bl	8003ba4 <xchg_spi>

}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40020c00 	.word	0x40020c00

08003ca0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2104      	movs	r1, #4
 8003ca8:	4809      	ldr	r0, [pc, #36]	; (8003cd0 <spiselect+0x30>)
 8003caa:	f7fd ff15 	bl	8001ad8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003cae:	20ff      	movs	r0, #255	; 0xff
 8003cb0:	f7ff ff78 	bl	8003ba4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cb8:	f7ff ffc1 	bl	8003c3e <wait_ready>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <spiselect+0x26>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e002      	b.n	8003ccc <spiselect+0x2c>

	despiselect();
 8003cc6:	f7ff ffdd 	bl	8003c84 <despiselect>
	return 0;	/* Timeout */
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40020c00 	.word	0x40020c00

08003cd4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003cde:	20c8      	movs	r0, #200	; 0xc8
 8003ce0:	f7ff ff36 	bl	8003b50 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003ce4:	20ff      	movs	r0, #255	; 0xff
 8003ce6:	f7ff ff5d 	bl	8003ba4 <xchg_spi>
 8003cea:	4603      	mov	r3, r0
 8003cec:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2bff      	cmp	r3, #255	; 0xff
 8003cf2:	d104      	bne.n	8003cfe <rcvr_datablock+0x2a>
 8003cf4:	f7ff ff40 	bl	8003b78 <SPI_Timer_Status>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f2      	bne.n	8003ce4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2bfe      	cmp	r3, #254	; 0xfe
 8003d02:	d001      	beq.n	8003d08 <rcvr_datablock+0x34>
 8003d04:	2300      	movs	r3, #0
 8003d06:	e00a      	b.n	8003d1e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ff60 	bl	8003bd0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003d10:	20ff      	movs	r0, #255	; 0xff
 8003d12:	f7ff ff47 	bl	8003ba4 <xchg_spi>
 8003d16:	20ff      	movs	r0, #255	; 0xff
 8003d18:	f7ff ff44 	bl	8003ba4 <xchg_spi>

	return 1;						/* Function succeeded */
 8003d1c:	2301      	movs	r3, #1
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003d32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d36:	f7ff ff82 	bl	8003c3e <wait_ready>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <xmit_datablock+0x1e>
 8003d40:	2300      	movs	r3, #0
 8003d42:	e01e      	b.n	8003d82 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ff2c 	bl	8003ba4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	2bfd      	cmp	r3, #253	; 0xfd
 8003d50:	d016      	beq.n	8003d80 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff ff56 	bl	8003c08 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003d5c:	20ff      	movs	r0, #255	; 0xff
 8003d5e:	f7ff ff21 	bl	8003ba4 <xchg_spi>
 8003d62:	20ff      	movs	r0, #255	; 0xff
 8003d64:	f7ff ff1e 	bl	8003ba4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003d68:	20ff      	movs	r0, #255	; 0xff
 8003d6a:	f7ff ff1b 	bl	8003ba4 <xchg_spi>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d001      	beq.n	8003d80 <xmit_datablock+0x5a>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <xmit_datablock+0x5c>
	}
	return 1;
 8003d80:	2301      	movs	r3, #1
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	4603      	mov	r3, r0
 8003d92:	6039      	str	r1, [r7, #0]
 8003d94:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	da0e      	bge.n	8003dbc <send_cmd+0x32>
		cmd &= 0x7F;
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003da6:	2100      	movs	r1, #0
 8003da8:	2037      	movs	r0, #55	; 0x37
 8003daa:	f7ff ffee 	bl	8003d8a <send_cmd>
 8003dae:	4603      	mov	r3, r0
 8003db0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003db2:	7bbb      	ldrb	r3, [r7, #14]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d901      	bls.n	8003dbc <send_cmd+0x32>
 8003db8:	7bbb      	ldrb	r3, [r7, #14]
 8003dba:	e051      	b.n	8003e60 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	2b0c      	cmp	r3, #12
 8003dc0:	d008      	beq.n	8003dd4 <send_cmd+0x4a>
		despiselect();
 8003dc2:	f7ff ff5f 	bl	8003c84 <despiselect>
		if (!spiselect()) return 0xFF;
 8003dc6:	f7ff ff6b 	bl	8003ca0 <spiselect>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <send_cmd+0x4a>
 8003dd0:	23ff      	movs	r3, #255	; 0xff
 8003dd2:	e045      	b.n	8003e60 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fee1 	bl	8003ba4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	0e1b      	lsrs	r3, r3, #24
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff fedb 	bl	8003ba4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fed5 	bl	8003ba4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fecf 	bl	8003ba4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff feca 	bl	8003ba4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <send_cmd+0x94>
 8003e1a:	2395      	movs	r3, #149	; 0x95
 8003e1c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d101      	bne.n	8003e28 <send_cmd+0x9e>
 8003e24:	2387      	movs	r3, #135	; 0x87
 8003e26:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff feba 	bl	8003ba4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d102      	bne.n	8003e3c <send_cmd+0xb2>
 8003e36:	20ff      	movs	r0, #255	; 0xff
 8003e38:	f7ff feb4 	bl	8003ba4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003e3c:	230a      	movs	r3, #10
 8003e3e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003e40:	20ff      	movs	r0, #255	; 0xff
 8003e42:	f7ff feaf 	bl	8003ba4 <xchg_spi>
 8003e46:	4603      	mov	r3, r0
 8003e48:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da05      	bge.n	8003e5e <send_cmd+0xd4>
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <USER_SPI_initialize+0x14>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0d6      	b.n	800402a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003e7c:	4b6d      	ldr	r3, [pc, #436]	; (8004034 <USER_SPI_initialize+0x1cc>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <USER_SPI_initialize+0x2a>
 8003e8a:	4b6a      	ldr	r3, [pc, #424]	; (8004034 <USER_SPI_initialize+0x1cc>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	e0cb      	b.n	800402a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003e92:	4b69      	ldr	r3, [pc, #420]	; (8004038 <USER_SPI_initialize+0x1d0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e9c:	4b66      	ldr	r3, [pc, #408]	; (8004038 <USER_SPI_initialize+0x1d0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003ea4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003ea6:	230a      	movs	r3, #10
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	e005      	b.n	8003eb8 <USER_SPI_initialize+0x50>
 8003eac:	20ff      	movs	r0, #255	; 0xff
 8003eae:	f7ff fe79 	bl	8003ba4 <xchg_spi>
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f6      	bne.n	8003eac <USER_SPI_initialize+0x44>

	ty = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7ff ff60 	bl	8003d8a <send_cmd>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	f040 808b 	bne.w	8003fe8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ed6:	f7ff fe3b 	bl	8003b50 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003eda:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003ede:	2008      	movs	r0, #8
 8003ee0:	f7ff ff53 	bl	8003d8a <send_cmd>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d151      	bne.n	8003f8e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
 8003eee:	e00d      	b.n	8003f0c <USER_SPI_initialize+0xa4>
 8003ef0:	7bfc      	ldrb	r4, [r7, #15]
 8003ef2:	20ff      	movs	r0, #255	; 0xff
 8003ef4:	f7ff fe56 	bl	8003ba4 <xchg_spi>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	f104 0310 	add.w	r3, r4, #16
 8003f00:	443b      	add	r3, r7
 8003f02:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d9ee      	bls.n	8003ef0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003f12:	7abb      	ldrb	r3, [r7, #10]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d167      	bne.n	8003fe8 <USER_SPI_initialize+0x180>
 8003f18:	7afb      	ldrb	r3, [r7, #11]
 8003f1a:	2baa      	cmp	r3, #170	; 0xaa
 8003f1c:	d164      	bne.n	8003fe8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003f1e:	bf00      	nop
 8003f20:	f7ff fe2a 	bl	8003b78 <SPI_Timer_Status>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <USER_SPI_initialize+0xd2>
 8003f2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003f2e:	20a9      	movs	r0, #169	; 0xa9
 8003f30:	f7ff ff2b 	bl	8003d8a <send_cmd>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f2      	bne.n	8003f20 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003f3a:	f7ff fe1d 	bl	8003b78 <SPI_Timer_Status>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d051      	beq.n	8003fe8 <USER_SPI_initialize+0x180>
 8003f44:	2100      	movs	r1, #0
 8003f46:	203a      	movs	r0, #58	; 0x3a
 8003f48:	f7ff ff1f 	bl	8003d8a <send_cmd>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d14a      	bne.n	8003fe8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003f52:	2300      	movs	r3, #0
 8003f54:	73fb      	strb	r3, [r7, #15]
 8003f56:	e00d      	b.n	8003f74 <USER_SPI_initialize+0x10c>
 8003f58:	7bfc      	ldrb	r4, [r7, #15]
 8003f5a:	20ff      	movs	r0, #255	; 0xff
 8003f5c:	f7ff fe22 	bl	8003ba4 <xchg_spi>
 8003f60:	4603      	mov	r3, r0
 8003f62:	461a      	mov	r2, r3
 8003f64:	f104 0310 	add.w	r3, r4, #16
 8003f68:	443b      	add	r3, r7
 8003f6a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	3301      	adds	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d9ee      	bls.n	8003f58 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003f7a:	7a3b      	ldrb	r3, [r7, #8]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <USER_SPI_initialize+0x120>
 8003f84:	230c      	movs	r3, #12
 8003f86:	e000      	b.n	8003f8a <USER_SPI_initialize+0x122>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	737b      	strb	r3, [r7, #13]
 8003f8c:	e02c      	b.n	8003fe8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003f8e:	2100      	movs	r1, #0
 8003f90:	20a9      	movs	r0, #169	; 0xa9
 8003f92:	f7ff fefa 	bl	8003d8a <send_cmd>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d804      	bhi.n	8003fa6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	737b      	strb	r3, [r7, #13]
 8003fa0:	23a9      	movs	r3, #169	; 0xa9
 8003fa2:	73bb      	strb	r3, [r7, #14]
 8003fa4:	e003      	b.n	8003fae <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	737b      	strb	r3, [r7, #13]
 8003faa:	2301      	movs	r3, #1
 8003fac:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003fae:	bf00      	nop
 8003fb0:	f7ff fde2 	bl	8003b78 <SPI_Timer_Status>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <USER_SPI_initialize+0x162>
 8003fba:	7bbb      	ldrb	r3, [r7, #14]
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fee3 	bl	8003d8a <send_cmd>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f2      	bne.n	8003fb0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003fca:	f7ff fdd5 	bl	8003b78 <SPI_Timer_Status>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <USER_SPI_initialize+0x17c>
 8003fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fd8:	2010      	movs	r0, #16
 8003fda:	f7ff fed6 	bl	8003d8a <send_cmd>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <USER_SPI_initialize+0x180>
				ty = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003fe8:	4a14      	ldr	r2, [pc, #80]	; (800403c <USER_SPI_initialize+0x1d4>)
 8003fea:	7b7b      	ldrb	r3, [r7, #13]
 8003fec:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003fee:	f7ff fe49 	bl	8003c84 <despiselect>

	if (ty) {			/* OK */
 8003ff2:	7b7b      	ldrb	r3, [r7, #13]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d012      	beq.n	800401e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <USER_SPI_initialize+0x1d0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <USER_SPI_initialize+0x1d0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0210 	orr.w	r2, r2, #16
 800400a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <USER_SPI_initialize+0x1cc>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <USER_SPI_initialize+0x1cc>)
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	e002      	b.n	8004024 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <USER_SPI_initialize+0x1cc>)
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <USER_SPI_initialize+0x1cc>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	b2db      	uxtb	r3, r3
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}
 8004032:	bf00      	nop
 8004034:	20000020 	.word	0x20000020
 8004038:	20000090 	.word	0x20000090
 800403c:	20000184 	.word	0x20000184

08004040 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <USER_SPI_status+0x14>
 8004050:	2301      	movs	r3, #1
 8004052:	e002      	b.n	800405a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <USER_SPI_status+0x28>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	b2db      	uxtb	r3, r3
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000020 	.word	0x20000020

0800406c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4603      	mov	r3, r0
 800407a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <USER_SPI_read+0x1c>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <USER_SPI_read+0x20>
 8004088:	2304      	movs	r3, #4
 800408a:	e04d      	b.n	8004128 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800408c:	4b28      	ldr	r3, [pc, #160]	; (8004130 <USER_SPI_read+0xc4>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <USER_SPI_read+0x32>
 800409a:	2303      	movs	r3, #3
 800409c:	e044      	b.n	8004128 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <USER_SPI_read+0xc8>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <USER_SPI_read+0x44>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	025b      	lsls	r3, r3, #9
 80040ae:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d111      	bne.n	80040da <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	2011      	movs	r0, #17
 80040ba:	f7ff fe66 	bl	8003d8a <send_cmd>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d129      	bne.n	8004118 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80040c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040c8:	68b8      	ldr	r0, [r7, #8]
 80040ca:	f7ff fe03 	bl	8003cd4 <rcvr_datablock>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d021      	beq.n	8004118 <USER_SPI_read+0xac>
			count = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	e01e      	b.n	8004118 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	2012      	movs	r0, #18
 80040de:	f7ff fe54 	bl	8003d8a <send_cmd>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d117      	bne.n	8004118 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80040e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040ec:	68b8      	ldr	r0, [r7, #8]
 80040ee:	f7ff fdf1 	bl	8003cd4 <rcvr_datablock>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <USER_SPI_read+0xa2>
				buff += 512;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	3b01      	subs	r3, #1
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1ed      	bne.n	80040e8 <USER_SPI_read+0x7c>
 800410c:	e000      	b.n	8004110 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800410e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004110:	2100      	movs	r1, #0
 8004112:	200c      	movs	r0, #12
 8004114:	f7ff fe39 	bl	8003d8a <send_cmd>
		}
	}
	despiselect();
 8004118:	f7ff fdb4 	bl	8003c84 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	bf14      	ite	ne
 8004122:	2301      	movne	r3, #1
 8004124:	2300      	moveq	r3, #0
 8004126:	b2db      	uxtb	r3, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000020 	.word	0x20000020
 8004134:	20000184 	.word	0x20000184

08004138 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <USER_SPI_write+0x1c>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <USER_SPI_write+0x20>
 8004154:	2304      	movs	r3, #4
 8004156:	e063      	b.n	8004220 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004158:	4b33      	ldr	r3, [pc, #204]	; (8004228 <USER_SPI_write+0xf0>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <USER_SPI_write+0x32>
 8004166:	2303      	movs	r3, #3
 8004168:	e05a      	b.n	8004220 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800416a:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <USER_SPI_write+0xf0>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <USER_SPI_write+0x44>
 8004178:	2302      	movs	r3, #2
 800417a:	e051      	b.n	8004220 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <USER_SPI_write+0xf4>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <USER_SPI_write+0x56>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	025b      	lsls	r3, r3, #9
 800418c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d110      	bne.n	80041b6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	2018      	movs	r0, #24
 8004198:	f7ff fdf7 	bl	8003d8a <send_cmd>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d136      	bne.n	8004210 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80041a2:	21fe      	movs	r1, #254	; 0xfe
 80041a4:	68b8      	ldr	r0, [r7, #8]
 80041a6:	f7ff fdbe 	bl	8003d26 <xmit_datablock>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d02f      	beq.n	8004210 <USER_SPI_write+0xd8>
			count = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	e02c      	b.n	8004210 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <USER_SPI_write+0xf4>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	f003 0306 	and.w	r3, r3, #6
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <USER_SPI_write+0x92>
 80041c2:	6839      	ldr	r1, [r7, #0]
 80041c4:	2097      	movs	r0, #151	; 0x97
 80041c6:	f7ff fde0 	bl	8003d8a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	2019      	movs	r0, #25
 80041ce:	f7ff fddc 	bl	8003d8a <send_cmd>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d11b      	bne.n	8004210 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80041d8:	21fc      	movs	r1, #252	; 0xfc
 80041da:	68b8      	ldr	r0, [r7, #8]
 80041dc:	f7ff fda3 	bl	8003d26 <xmit_datablock>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <USER_SPI_write+0xc4>
				buff += 512;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80041ec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1ee      	bne.n	80041d8 <USER_SPI_write+0xa0>
 80041fa:	e000      	b.n	80041fe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80041fc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80041fe:	21fd      	movs	r1, #253	; 0xfd
 8004200:	2000      	movs	r0, #0
 8004202:	f7ff fd90 	bl	8003d26 <xmit_datablock>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <USER_SPI_write+0xd8>
 800420c:	2301      	movs	r3, #1
 800420e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004210:	f7ff fd38 	bl	8003c84 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	bf14      	ite	ne
 800421a:	2301      	movne	r3, #1
 800421c:	2300      	moveq	r3, #0
 800421e:	b2db      	uxtb	r3, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20000020 	.word	0x20000020
 800422c:	20000184 	.word	0x20000184

08004230 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08c      	sub	sp, #48	; 0x30
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	603a      	str	r2, [r7, #0]
 800423a:	71fb      	strb	r3, [r7, #7]
 800423c:	460b      	mov	r3, r1
 800423e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <USER_SPI_ioctl+0x1a>
 8004246:	2304      	movs	r3, #4
 8004248:	e15a      	b.n	8004500 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800424a:	4baf      	ldr	r3, [pc, #700]	; (8004508 <USER_SPI_ioctl+0x2d8>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <USER_SPI_ioctl+0x2c>
 8004258:	2303      	movs	r3, #3
 800425a:	e151      	b.n	8004500 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004262:	79bb      	ldrb	r3, [r7, #6]
 8004264:	2b04      	cmp	r3, #4
 8004266:	f200 8136 	bhi.w	80044d6 <USER_SPI_ioctl+0x2a6>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <USER_SPI_ioctl+0x40>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004285 	.word	0x08004285
 8004274:	08004299 	.word	0x08004299
 8004278:	080044d7 	.word	0x080044d7
 800427c:	08004345 	.word	0x08004345
 8004280:	0800443b 	.word	0x0800443b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004284:	f7ff fd0c 	bl	8003ca0 <spiselect>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8127 	beq.w	80044de <USER_SPI_ioctl+0x2ae>
 8004290:	2300      	movs	r3, #0
 8004292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004296:	e122      	b.n	80044de <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004298:	2100      	movs	r1, #0
 800429a:	2009      	movs	r0, #9
 800429c:	f7ff fd75 	bl	8003d8a <send_cmd>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 811d 	bne.w	80044e2 <USER_SPI_ioctl+0x2b2>
 80042a8:	f107 030c 	add.w	r3, r7, #12
 80042ac:	2110      	movs	r1, #16
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fd10 	bl	8003cd4 <rcvr_datablock>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8113 	beq.w	80044e2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80042bc:	7b3b      	ldrb	r3, [r7, #12]
 80042be:	099b      	lsrs	r3, r3, #6
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d111      	bne.n	80042ea <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80042c6:	7d7b      	ldrb	r3, [r7, #21]
 80042c8:	461a      	mov	r2, r3
 80042ca:	7d3b      	ldrb	r3, [r7, #20]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	4413      	add	r3, r2
 80042d0:	461a      	mov	r2, r3
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80042da:	4413      	add	r3, r2
 80042dc:	3301      	adds	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	029a      	lsls	r2, r3, #10
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e028      	b.n	800433c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80042ea:	7c7b      	ldrb	r3, [r7, #17]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	7dbb      	ldrb	r3, [r7, #22]
 80042f4:	09db      	lsrs	r3, r3, #7
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	7d7b      	ldrb	r3, [r7, #21]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0306 	and.w	r3, r3, #6
 8004306:	b2db      	uxtb	r3, r3
 8004308:	4413      	add	r3, r2
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3302      	adds	r3, #2
 800430e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004312:	7d3b      	ldrb	r3, [r7, #20]
 8004314:	099b      	lsrs	r3, r3, #6
 8004316:	b2db      	uxtb	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	7cfb      	ldrb	r3, [r7, #19]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	7cbb      	ldrb	r3, [r7, #18]
 8004322:	029b      	lsls	r3, r3, #10
 8004324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004328:	4413      	add	r3, r2
 800432a:	3301      	adds	r3, #1
 800432c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800432e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004332:	3b09      	subs	r3, #9
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	409a      	lsls	r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004342:	e0ce      	b.n	80044e2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004344:	4b71      	ldr	r3, [pc, #452]	; (800450c <USER_SPI_ioctl+0x2dc>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d031      	beq.n	80043b4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004350:	2100      	movs	r1, #0
 8004352:	208d      	movs	r0, #141	; 0x8d
 8004354:	f7ff fd19 	bl	8003d8a <send_cmd>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 80c3 	bne.w	80044e6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004360:	20ff      	movs	r0, #255	; 0xff
 8004362:	f7ff fc1f 	bl	8003ba4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004366:	f107 030c 	add.w	r3, r7, #12
 800436a:	2110      	movs	r1, #16
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fcb1 	bl	8003cd4 <rcvr_datablock>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80b6 	beq.w	80044e6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800437a:	2330      	movs	r3, #48	; 0x30
 800437c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004380:	e007      	b.n	8004392 <USER_SPI_ioctl+0x162>
 8004382:	20ff      	movs	r0, #255	; 0xff
 8004384:	f7ff fc0e 	bl	8003ba4 <xchg_spi>
 8004388:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800438c:	3b01      	subs	r3, #1
 800438e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004392:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f3      	bne.n	8004382 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800439a:	7dbb      	ldrb	r3, [r7, #22]
 800439c:	091b      	lsrs	r3, r3, #4
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	2310      	movs	r3, #16
 80043a4:	fa03 f202 	lsl.w	r2, r3, r2
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80043b2:	e098      	b.n	80044e6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80043b4:	2100      	movs	r1, #0
 80043b6:	2009      	movs	r0, #9
 80043b8:	f7ff fce7 	bl	8003d8a <send_cmd>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f040 8091 	bne.w	80044e6 <USER_SPI_ioctl+0x2b6>
 80043c4:	f107 030c 	add.w	r3, r7, #12
 80043c8:	2110      	movs	r1, #16
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fc82 	bl	8003cd4 <rcvr_datablock>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8087 	beq.w	80044e6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80043d8:	4b4c      	ldr	r3, [pc, #304]	; (800450c <USER_SPI_ioctl+0x2dc>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d012      	beq.n	800440a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80043e4:	7dbb      	ldrb	r3, [r7, #22]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80043ec:	7dfa      	ldrb	r2, [r7, #23]
 80043ee:	09d2      	lsrs	r2, r2, #7
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	4413      	add	r3, r2
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	7e7b      	ldrb	r3, [r7, #25]
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	461a      	mov	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e013      	b.n	8004432 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800440a:	7dbb      	ldrb	r3, [r7, #22]
 800440c:	109b      	asrs	r3, r3, #2
 800440e:	b29b      	uxth	r3, r3
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	3301      	adds	r3, #1
 8004416:	7dfa      	ldrb	r2, [r7, #23]
 8004418:	00d2      	lsls	r2, r2, #3
 800441a:	f002 0218 	and.w	r2, r2, #24
 800441e:	7df9      	ldrb	r1, [r7, #23]
 8004420:	0949      	lsrs	r1, r1, #5
 8004422:	b2c9      	uxtb	r1, r1
 8004424:	440a      	add	r2, r1
 8004426:	3201      	adds	r2, #1
 8004428:	fb02 f303 	mul.w	r3, r2, r3
 800442c:	461a      	mov	r2, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004438:	e055      	b.n	80044e6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800443a:	4b34      	ldr	r3, [pc, #208]	; (800450c <USER_SPI_ioctl+0x2dc>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	f003 0306 	and.w	r3, r3, #6
 8004442:	2b00      	cmp	r3, #0
 8004444:	d051      	beq.n	80044ea <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004446:	f107 020c 	add.w	r2, r7, #12
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	210b      	movs	r1, #11
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff feee 	bl	8004230 <USER_SPI_ioctl>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d149      	bne.n	80044ee <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800445a:	7b3b      	ldrb	r3, [r7, #12]
 800445c:	099b      	lsrs	r3, r3, #6
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d104      	bne.n	800446e <USER_SPI_ioctl+0x23e>
 8004464:	7dbb      	ldrb	r3, [r7, #22]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d041      	beq.n	80044f2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800447e:	4b23      	ldr	r3, [pc, #140]	; (800450c <USER_SPI_ioctl+0x2dc>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	025b      	lsls	r3, r3, #9
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	025b      	lsls	r3, r3, #9
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004498:	2020      	movs	r0, #32
 800449a:	f7ff fc76 	bl	8003d8a <send_cmd>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d128      	bne.n	80044f6 <USER_SPI_ioctl+0x2c6>
 80044a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044a6:	2021      	movs	r0, #33	; 0x21
 80044a8:	f7ff fc6f 	bl	8003d8a <send_cmd>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d121      	bne.n	80044f6 <USER_SPI_ioctl+0x2c6>
 80044b2:	2100      	movs	r1, #0
 80044b4:	2026      	movs	r0, #38	; 0x26
 80044b6:	f7ff fc68 	bl	8003d8a <send_cmd>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d11a      	bne.n	80044f6 <USER_SPI_ioctl+0x2c6>
 80044c0:	f247 5030 	movw	r0, #30000	; 0x7530
 80044c4:	f7ff fbbb 	bl	8003c3e <wait_ready>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d013      	beq.n	80044f6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80044d4:	e00f      	b.n	80044f6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80044d6:	2304      	movs	r3, #4
 80044d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80044dc:	e00c      	b.n	80044f8 <USER_SPI_ioctl+0x2c8>
		break;
 80044de:	bf00      	nop
 80044e0:	e00a      	b.n	80044f8 <USER_SPI_ioctl+0x2c8>
		break;
 80044e2:	bf00      	nop
 80044e4:	e008      	b.n	80044f8 <USER_SPI_ioctl+0x2c8>
		break;
 80044e6:	bf00      	nop
 80044e8:	e006      	b.n	80044f8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80044ea:	bf00      	nop
 80044ec:	e004      	b.n	80044f8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80044ee:	bf00      	nop
 80044f0:	e002      	b.n	80044f8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <USER_SPI_ioctl+0x2c8>
		break;
 80044f6:	bf00      	nop
	}

	despiselect();
 80044f8:	f7ff fbc4 	bl	8003c84 <despiselect>

	return res;
 80044fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004500:	4618      	mov	r0, r3
 8004502:	3730      	adds	r7, #48	; 0x30
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000020 	.word	0x20000020
 800450c:	20000184 	.word	0x20000184

08004510 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	4a08      	ldr	r2, [pc, #32]	; (8004540 <disk_status+0x30>)
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	79fa      	ldrb	r2, [r7, #7]
 8004528:	4905      	ldr	r1, [pc, #20]	; (8004540 <disk_status+0x30>)
 800452a:	440a      	add	r2, r1
 800452c:	7a12      	ldrb	r2, [r2, #8]
 800452e:	4610      	mov	r0, r2
 8004530:	4798      	blx	r3
 8004532:	4603      	mov	r3, r0
 8004534:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	200001b8 	.word	0x200001b8

08004544 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	4a0d      	ldr	r2, [pc, #52]	; (800458c <disk_initialize+0x48>)
 8004556:	5cd3      	ldrb	r3, [r2, r3]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d111      	bne.n	8004580 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	4a0b      	ldr	r2, [pc, #44]	; (800458c <disk_initialize+0x48>)
 8004560:	2101      	movs	r1, #1
 8004562:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	4a09      	ldr	r2, [pc, #36]	; (800458c <disk_initialize+0x48>)
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	79fa      	ldrb	r2, [r7, #7]
 8004572:	4906      	ldr	r1, [pc, #24]	; (800458c <disk_initialize+0x48>)
 8004574:	440a      	add	r2, r1
 8004576:	7a12      	ldrb	r2, [r2, #8]
 8004578:	4610      	mov	r0, r2
 800457a:	4798      	blx	r3
 800457c:	4603      	mov	r3, r0
 800457e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200001b8 	.word	0x200001b8

08004590 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <disk_read+0x3c>)
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	689c      	ldr	r4, [r3, #8]
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	4a07      	ldr	r2, [pc, #28]	; (80045cc <disk_read+0x3c>)
 80045b0:	4413      	add	r3, r2
 80045b2:	7a18      	ldrb	r0, [r3, #8]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	47a0      	blx	r4
 80045bc:	4603      	mov	r3, r0
 80045be:	75fb      	strb	r3, [r7, #23]
  return res;
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd90      	pop	{r4, r7, pc}
 80045ca:	bf00      	nop
 80045cc:	200001b8 	.word	0x200001b8

080045d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4603      	mov	r3, r0
 80045de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <disk_write+0x3c>)
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	68dc      	ldr	r4, [r3, #12]
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	4a07      	ldr	r2, [pc, #28]	; (800460c <disk_write+0x3c>)
 80045f0:	4413      	add	r3, r2
 80045f2:	7a18      	ldrb	r0, [r3, #8]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	47a0      	blx	r4
 80045fc:	4603      	mov	r3, r0
 80045fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8004600:	7dfb      	ldrb	r3, [r7, #23]
}
 8004602:	4618      	mov	r0, r3
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd90      	pop	{r4, r7, pc}
 800460a:	bf00      	nop
 800460c:	200001b8 	.word	0x200001b8

08004610 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	603a      	str	r2, [r7, #0]
 800461a:	71fb      	strb	r3, [r7, #7]
 800461c:	460b      	mov	r3, r1
 800461e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <disk_ioctl+0x38>)
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	79fa      	ldrb	r2, [r7, #7]
 800462e:	4906      	ldr	r1, [pc, #24]	; (8004648 <disk_ioctl+0x38>)
 8004630:	440a      	add	r2, r1
 8004632:	7a10      	ldrb	r0, [r2, #8]
 8004634:	79b9      	ldrb	r1, [r7, #6]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4798      	blx	r3
 800463a:	4603      	mov	r3, r0
 800463c:	73fb      	strb	r3, [r7, #15]
  return res;
 800463e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	200001b8 	.word	0x200001b8

0800464c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3301      	adds	r3, #1
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800465c:	89fb      	ldrh	r3, [r7, #14]
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	b21a      	sxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	b21b      	sxth	r3, r3
 8004668:	4313      	orrs	r3, r2
 800466a:	b21b      	sxth	r3, r3
 800466c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800466e:	89fb      	ldrh	r3, [r7, #14]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3303      	adds	r3, #3
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	3202      	adds	r2, #2
 8004694:	7812      	ldrb	r2, [r2, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	3201      	adds	r2, #1
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	7812      	ldrb	r2, [r2, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80046b4:	68fb      	ldr	r3, [r7, #12]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	887a      	ldrh	r2, [r7, #2]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	887b      	ldrh	r3, [r7, #2]
 80046dc:	0a1b      	lsrs	r3, r3, #8
 80046de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	0a1b      	lsrs	r3, r3, #8
 8004712:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	0a1b      	lsrs	r3, r3, #8
 8004736:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00d      	beq.n	8004786 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	1c53      	adds	r3, r2, #1
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	1c59      	adds	r1, r3, #1
 8004774:	6179      	str	r1, [r7, #20]
 8004776:	7812      	ldrb	r2, [r2, #0]
 8004778:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3b01      	subs	r3, #1
 800477e:	607b      	str	r3, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f1      	bne.n	800476a <mem_cpy+0x1a>
	}
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004792:	b480      	push	{r7}
 8004794:	b087      	sub	sp, #28
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	617a      	str	r2, [r7, #20]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f3      	bne.n	80047a2 <mem_set+0x10>
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	; 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	61fa      	str	r2, [r7, #28]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	4619      	mov	r1, r3
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	61ba      	str	r2, [r7, #24]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	1acb      	subs	r3, r1, r3
 80047f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <mem_cmp+0x40>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0eb      	beq.n	80047e0 <mem_cmp+0x18>

	return r;
 8004808:	697b      	ldr	r3, [r7, #20]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3724      	adds	r7, #36	; 0x24
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004820:	e002      	b.n	8004828 <chk_chr+0x12>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3301      	adds	r3, #1
 8004826:	607b      	str	r3, [r7, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <chk_chr+0x26>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	4293      	cmp	r3, r2
 800483a:	d1f2      	bne.n	8004822 <chk_chr+0xc>
	return *str;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	781b      	ldrb	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e029      	b.n	80048b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004860:	4a27      	ldr	r2, [pc, #156]	; (8004900 <chk_lock+0xb4>)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	4413      	add	r3, r2
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01d      	beq.n	80048aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800486e:	4a24      	ldr	r2, [pc, #144]	; (8004900 <chk_lock+0xb4>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	4413      	add	r3, r2
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d116      	bne.n	80048ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004880:	4a1f      	ldr	r2, [pc, #124]	; (8004900 <chk_lock+0xb4>)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	4413      	add	r3, r2
 8004888:	3304      	adds	r3, #4
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004890:	429a      	cmp	r2, r3
 8004892:	d10c      	bne.n	80048ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004894:	4a1a      	ldr	r2, [pc, #104]	; (8004900 <chk_lock+0xb4>)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	4413      	add	r3, r2
 800489c:	3308      	adds	r3, #8
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d102      	bne.n	80048ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80048a8:	e007      	b.n	80048ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80048aa:	2301      	movs	r3, #1
 80048ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d9d2      	bls.n	8004860 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d109      	bne.n	80048d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <chk_lock+0x80>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d101      	bne.n	80048d0 <chk_lock+0x84>
 80048cc:	2300      	movs	r3, #0
 80048ce:	e010      	b.n	80048f2 <chk_lock+0xa6>
 80048d0:	2312      	movs	r3, #18
 80048d2:	e00e      	b.n	80048f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d108      	bne.n	80048ec <chk_lock+0xa0>
 80048da:	4a09      	ldr	r2, [pc, #36]	; (8004900 <chk_lock+0xb4>)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	4413      	add	r3, r2
 80048e2:	330c      	adds	r3, #12
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	d101      	bne.n	80048f0 <chk_lock+0xa4>
 80048ec:	2310      	movs	r3, #16
 80048ee:	e000      	b.n	80048f2 <chk_lock+0xa6>
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000198 	.word	0x20000198

08004904 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800490a:	2300      	movs	r3, #0
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	e002      	b.n	8004916 <enq_lock+0x12>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3301      	adds	r3, #1
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d806      	bhi.n	800492a <enq_lock+0x26>
 800491c:	4a09      	ldr	r2, [pc, #36]	; (8004944 <enq_lock+0x40>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	4413      	add	r3, r2
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f2      	bne.n	8004910 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b02      	cmp	r3, #2
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000198 	.word	0x20000198

08004948 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e01f      	b.n	8004998 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004958:	4a41      	ldr	r2, [pc, #260]	; (8004a60 <inc_lock+0x118>)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	4413      	add	r3, r2
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d113      	bne.n	8004992 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800496a:	4a3d      	ldr	r2, [pc, #244]	; (8004a60 <inc_lock+0x118>)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	4413      	add	r3, r2
 8004972:	3304      	adds	r3, #4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800497a:	429a      	cmp	r2, r3
 800497c:	d109      	bne.n	8004992 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800497e:	4a38      	ldr	r2, [pc, #224]	; (8004a60 <inc_lock+0x118>)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	4413      	add	r3, r2
 8004986:	3308      	adds	r3, #8
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800498e:	429a      	cmp	r2, r3
 8004990:	d006      	beq.n	80049a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3301      	adds	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d9dc      	bls.n	8004958 <inc_lock+0x10>
 800499e:	e000      	b.n	80049a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80049a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d132      	bne.n	8004a0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e002      	b.n	80049b4 <inc_lock+0x6c>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3301      	adds	r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d806      	bhi.n	80049c8 <inc_lock+0x80>
 80049ba:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <inc_lock+0x118>)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	4413      	add	r3, r2
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f2      	bne.n	80049ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d101      	bne.n	80049d2 <inc_lock+0x8a>
 80049ce:	2300      	movs	r3, #0
 80049d0:	e040      	b.n	8004a54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4922      	ldr	r1, [pc, #136]	; (8004a60 <inc_lock+0x118>)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	440b      	add	r3, r1
 80049de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	491e      	ldr	r1, [pc, #120]	; (8004a60 <inc_lock+0x118>)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	440b      	add	r3, r1
 80049ec:	3304      	adds	r3, #4
 80049ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	491a      	ldr	r1, [pc, #104]	; (8004a60 <inc_lock+0x118>)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	440b      	add	r3, r1
 80049fc:	3308      	adds	r3, #8
 80049fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004a00:	4a17      	ldr	r2, [pc, #92]	; (8004a60 <inc_lock+0x118>)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	4413      	add	r3, r2
 8004a08:	330c      	adds	r3, #12
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d009      	beq.n	8004a28 <inc_lock+0xe0>
 8004a14:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <inc_lock+0x118>)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	4413      	add	r3, r2
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <inc_lock+0xe0>
 8004a24:	2300      	movs	r3, #0
 8004a26:	e015      	b.n	8004a54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d108      	bne.n	8004a40 <inc_lock+0xf8>
 8004a2e:	4a0c      	ldr	r2, [pc, #48]	; (8004a60 <inc_lock+0x118>)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	4413      	add	r3, r2
 8004a36:	330c      	adds	r3, #12
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	e001      	b.n	8004a44 <inc_lock+0xfc>
 8004a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a44:	4906      	ldr	r1, [pc, #24]	; (8004a60 <inc_lock+0x118>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	440b      	add	r3, r1
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3301      	adds	r3, #1
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	20000198 	.word	0x20000198

08004a64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d825      	bhi.n	8004ac4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004a78:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <dec_lock+0x74>)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	4413      	add	r3, r2
 8004a80:	330c      	adds	r3, #12
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004a86:	89fb      	ldrh	r3, [r7, #14]
 8004a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8c:	d101      	bne.n	8004a92 <dec_lock+0x2e>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004a92:	89fb      	ldrh	r3, [r7, #14]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <dec_lock+0x3a>
 8004a98:	89fb      	ldrh	r3, [r7, #14]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004a9e:	4a0e      	ldr	r2, [pc, #56]	; (8004ad8 <dec_lock+0x74>)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	4413      	add	r3, r2
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	89fa      	ldrh	r2, [r7, #14]
 8004aaa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004aac:	89fb      	ldrh	r3, [r7, #14]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d105      	bne.n	8004abe <dec_lock+0x5a>
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <dec_lock+0x74>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	4413      	add	r3, r2
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	737b      	strb	r3, [r7, #13]
 8004ac2:	e001      	b.n	8004ac8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004ac8:	7b7b      	ldrb	r3, [r7, #13]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000198 	.word	0x20000198

08004adc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e010      	b.n	8004b0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004aea:	4a0d      	ldr	r2, [pc, #52]	; (8004b20 <clear_lock+0x44>)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	4413      	add	r3, r2
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d105      	bne.n	8004b06 <clear_lock+0x2a>
 8004afa:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <clear_lock+0x44>)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	4413      	add	r3, r2
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d9eb      	bls.n	8004aea <clear_lock+0xe>
	}
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	20000198 	.word	0x20000198

08004b24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	78db      	ldrb	r3, [r3, #3]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d034      	beq.n	8004ba2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	7858      	ldrb	r0, [r3, #1]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004b48:	2301      	movs	r3, #1
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	f7ff fd40 	bl	80045d0 <disk_write>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
 8004b5a:	e022      	b.n	8004ba2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	1ad2      	subs	r2, r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d217      	bcs.n	8004ba2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	789b      	ldrb	r3, [r3, #2]
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	e010      	b.n	8004b9c <sync_window+0x78>
					wsect += fs->fsize;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4413      	add	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	7858      	ldrb	r0, [r3, #1]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004b8e:	2301      	movs	r3, #1
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	f7ff fd1d 	bl	80045d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d8eb      	bhi.n	8004b7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d01b      	beq.n	8004bfc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff ffad 	bl	8004b24 <sync_window>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d113      	bne.n	8004bfc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	7858      	ldrb	r0, [r3, #1]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004bde:	2301      	movs	r3, #1
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	f7ff fcd5 	bl	8004590 <disk_read>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004bec:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ff87 	bl	8004b24 <sync_window>
 8004c16:	4603      	mov	r3, r0
 8004c18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d158      	bne.n	8004cd2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d148      	bne.n	8004cba <sync_fs+0xb2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	791b      	ldrb	r3, [r3, #4]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d144      	bne.n	8004cba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3330      	adds	r3, #48	; 0x30
 8004c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fda9 	bl	8004792 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3330      	adds	r3, #48	; 0x30
 8004c44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004c48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff fd38 	bl	80046c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3330      	adds	r3, #48	; 0x30
 8004c56:	4921      	ldr	r1, [pc, #132]	; (8004cdc <sync_fs+0xd4>)
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fd4d 	bl	80046f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3330      	adds	r3, #48	; 0x30
 8004c62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004c66:	491e      	ldr	r1, [pc, #120]	; (8004ce0 <sync_fs+0xd8>)
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fd45 	bl	80046f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3330      	adds	r3, #48	; 0x30
 8004c72:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f7ff fd3b 	bl	80046f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3330      	adds	r3, #48	; 0x30
 8004c86:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f7ff fd31 	bl	80046f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7858      	ldrb	r0, [r3, #1]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f7ff fc8e 	bl	80045d0 <disk_write>
			fs->fsi_flag = 0;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	785b      	ldrb	r3, [r3, #1]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fca4 	bl	8004610 <disk_ioctl>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <sync_fs+0xca>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	41615252 	.word	0x41615252
 8004ce0:	61417272 	.word	0x61417272

08004ce4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	3b02      	subs	r3, #2
 8004cf2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	3b02      	subs	r3, #2
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d301      	bcc.n	8004d04 <clust2sect+0x20>
 8004d00:	2300      	movs	r3, #0
 8004d02:	e008      	b.n	8004d16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	895b      	ldrh	r3, [r3, #10]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	fb03 f202 	mul.w	r2, r3, r2
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	4413      	add	r3, r2
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b086      	sub	sp, #24
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d904      	bls.n	8004d42 <get_fat+0x20>
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d302      	bcc.n	8004d48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004d42:	2301      	movs	r3, #1
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e08f      	b.n	8004e68 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004d48:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d062      	beq.n	8004e1c <get_fat+0xfa>
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	dc7c      	bgt.n	8004e54 <get_fat+0x132>
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d002      	beq.n	8004d64 <get_fat+0x42>
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d042      	beq.n	8004de8 <get_fat+0xc6>
 8004d62:	e077      	b.n	8004e54 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	6a1a      	ldr	r2, [r3, #32]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	0a5b      	lsrs	r3, r3, #9
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6938      	ldr	r0, [r7, #16]
 8004d80:	f7ff ff14 	bl	8004bac <move_window>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d167      	bne.n	8004e5a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	60fa      	str	r2, [r7, #12]
 8004d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	6a1a      	ldr	r2, [r3, #32]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0a5b      	lsrs	r3, r3, #9
 8004da6:	4413      	add	r3, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	6938      	ldr	r0, [r7, #16]
 8004dac:	f7ff fefe 	bl	8004bac <move_window>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d153      	bne.n	8004e5e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <get_fat+0xbc>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	e002      	b.n	8004de4 <get_fat+0xc2>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de4:	617b      	str	r3, [r7, #20]
			break;
 8004de6:	e03f      	b.n	8004e68 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6a1a      	ldr	r2, [r3, #32]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	4413      	add	r3, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	6938      	ldr	r0, [r7, #16]
 8004df6:	f7ff fed9 	bl	8004bac <move_window>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d130      	bne.n	8004e62 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004e0e:	4413      	add	r3, r2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fc1b 	bl	800464c <ld_word>
 8004e16:	4603      	mov	r3, r0
 8004e18:	617b      	str	r3, [r7, #20]
			break;
 8004e1a:	e025      	b.n	8004e68 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	6a1a      	ldr	r2, [r3, #32]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	09db      	lsrs	r3, r3, #7
 8004e24:	4413      	add	r3, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	6938      	ldr	r0, [r7, #16]
 8004e2a:	f7ff febf 	bl	8004bac <move_window>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d118      	bne.n	8004e66 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004e42:	4413      	add	r3, r2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fc19 	bl	800467c <ld_dword>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e50:	617b      	str	r3, [r7, #20]
			break;
 8004e52:	e009      	b.n	8004e68 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004e54:	2301      	movs	r3, #1
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	e006      	b.n	8004e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e5a:	bf00      	nop
 8004e5c:	e004      	b.n	8004e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e66:	bf00      	nop
		}
	}

	return val;
 8004e68:	697b      	ldr	r3, [r7, #20]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004e72:	b590      	push	{r4, r7, lr}
 8004e74:	b089      	sub	sp, #36	; 0x24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	f240 80d9 	bls.w	800503c <put_fat+0x1ca>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	f080 80d3 	bcs.w	800503c <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	f000 8096 	beq.w	8004fcc <put_fat+0x15a>
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	f300 80cb 	bgt.w	800503c <put_fat+0x1ca>
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d002      	beq.n	8004eb0 <put_fat+0x3e>
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d06e      	beq.n	8004f8c <put_fat+0x11a>
 8004eae:	e0c5      	b.n	800503c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4413      	add	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1a      	ldr	r2, [r3, #32]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	0a5b      	lsrs	r3, r3, #9
 8004ec6:	4413      	add	r3, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff fe6e 	bl	8004bac <move_window>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ed4:	7ffb      	ldrb	r3, [r7, #31]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f040 80a9 	bne.w	800502e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	1c59      	adds	r1, r3, #1
 8004ee6:	61b9      	str	r1, [r7, #24]
 8004ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eec:	4413      	add	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00d      	beq.n	8004f16 <put_fat+0xa4>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b25b      	sxtb	r3, r3
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	b25a      	sxtb	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	b25b      	sxtb	r3, r3
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	b25b      	sxtb	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	e001      	b.n	8004f1a <put_fat+0xa8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a1a      	ldr	r2, [r3, #32]
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	0a5b      	lsrs	r3, r3, #9
 8004f2c:	4413      	add	r3, r2
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fe3b 	bl	8004bac <move_window>
 8004f36:	4603      	mov	r3, r0
 8004f38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f3a:	7ffb      	ldrb	r3, [r7, #31]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d178      	bne.n	8005032 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4c:	4413      	add	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <put_fat+0xf0>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	e00e      	b.n	8004f80 <put_fat+0x10e>
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	b25b      	sxtb	r3, r3
 8004f68:	f023 030f 	bic.w	r3, r3, #15
 8004f6c:	b25a      	sxtb	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0a1b      	lsrs	r3, r3, #8
 8004f72:	b25b      	sxtb	r3, r3
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	b25b      	sxtb	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	70da      	strb	r2, [r3, #3]
			break;
 8004f8a:	e057      	b.n	800503c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	4413      	add	r3, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff fe07 	bl	8004bac <move_window>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004fa2:	7ffb      	ldrb	r3, [r7, #31]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d146      	bne.n	8005036 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004fb6:	4413      	add	r3, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	b292      	uxth	r2, r2
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fb7f 	bl	80046c2 <st_word>
			fs->wflag = 1;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	70da      	strb	r2, [r3, #3]
			break;
 8004fca:	e037      	b.n	800503c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	09db      	lsrs	r3, r3, #7
 8004fd4:	4413      	add	r3, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff fde7 	bl	8004bac <move_window>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004fe2:	7ffb      	ldrb	r3, [r7, #31]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d128      	bne.n	800503a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004ffc:	4413      	add	r3, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fb3c 	bl	800467c <ld_dword>
 8005004:	4603      	mov	r3, r0
 8005006:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800500a:	4323      	orrs	r3, r4
 800500c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800501c:	4413      	add	r3, r2
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fb69 	bl	80046f8 <st_dword>
			fs->wflag = 1;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	70da      	strb	r2, [r3, #3]
			break;
 800502c:	e006      	b.n	800503c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800502e:	bf00      	nop
 8005030:	e004      	b.n	800503c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005032:	bf00      	nop
 8005034:	e002      	b.n	800503c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005036:	bf00      	nop
 8005038:	e000      	b.n	800503c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800503a:	bf00      	nop
		}
	}
	return res;
 800503c:	7ffb      	ldrb	r3, [r7, #31]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3724      	adds	r7, #36	; 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd90      	pop	{r4, r7, pc}

08005046 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b088      	sub	sp, #32
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d904      	bls.n	800506c <remove_chain+0x26>
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	429a      	cmp	r2, r3
 800506a:	d301      	bcc.n	8005070 <remove_chain+0x2a>
 800506c:	2302      	movs	r3, #2
 800506e:	e04b      	b.n	8005108 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005076:	f04f 32ff 	mov.w	r2, #4294967295
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	69b8      	ldr	r0, [r7, #24]
 800507e:	f7ff fef8 	bl	8004e72 <put_fat>
 8005082:	4603      	mov	r3, r0
 8005084:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005086:	7ffb      	ldrb	r3, [r7, #31]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <remove_chain+0x4a>
 800508c:	7ffb      	ldrb	r3, [r7, #31]
 800508e:	e03b      	b.n	8005108 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff fe45 	bl	8004d22 <get_fat>
 8005098:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d031      	beq.n	8005104 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <remove_chain+0x64>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e02e      	b.n	8005108 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d101      	bne.n	80050b6 <remove_chain+0x70>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e028      	b.n	8005108 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80050b6:	2200      	movs	r2, #0
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	69b8      	ldr	r0, [r7, #24]
 80050bc:	f7ff fed9 	bl	8004e72 <put_fat>
 80050c0:	4603      	mov	r3, r0
 80050c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80050c4:	7ffb      	ldrb	r3, [r7, #31]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <remove_chain+0x88>
 80050ca:	7ffb      	ldrb	r3, [r7, #31]
 80050cc:	e01c      	b.n	8005108 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	3b02      	subs	r3, #2
 80050d8:	429a      	cmp	r2, r3
 80050da:	d20b      	bcs.n	80050f4 <remove_chain+0xae>
			fs->free_clst++;
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	791b      	ldrb	r3, [r3, #4]
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d3c6      	bcc.n	8005090 <remove_chain+0x4a>
 8005102:	e000      	b.n	8005106 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005104:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10d      	bne.n	8005142 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <create_chain+0x2c>
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	429a      	cmp	r2, r3
 800513a:	d31b      	bcc.n	8005174 <create_chain+0x64>
 800513c:	2301      	movs	r3, #1
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	e018      	b.n	8005174 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fdec 	bl	8004d22 <get_fat>
 800514a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d801      	bhi.n	8005156 <create_chain+0x46>
 8005152:	2301      	movs	r3, #1
 8005154:	e070      	b.n	8005238 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d101      	bne.n	8005162 <create_chain+0x52>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	e06a      	b.n	8005238 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	429a      	cmp	r2, r3
 800516a:	d201      	bcs.n	8005170 <create_chain+0x60>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	e063      	b.n	8005238 <create_chain+0x128>
		scl = clst;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	3301      	adds	r3, #1
 800517c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	429a      	cmp	r2, r3
 8005186:	d307      	bcc.n	8005198 <create_chain+0x88>
				ncl = 2;
 8005188:	2302      	movs	r3, #2
 800518a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	429a      	cmp	r2, r3
 8005192:	d901      	bls.n	8005198 <create_chain+0x88>
 8005194:	2300      	movs	r3, #0
 8005196:	e04f      	b.n	8005238 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005198:	69f9      	ldr	r1, [r7, #28]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fdc1 	bl	8004d22 <get_fat>
 80051a0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00e      	beq.n	80051c6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d003      	beq.n	80051b6 <create_chain+0xa6>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d101      	bne.n	80051ba <create_chain+0xaa>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	e03e      	b.n	8005238 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d1da      	bne.n	8005178 <create_chain+0x68>
 80051c2:	2300      	movs	r3, #0
 80051c4:	e038      	b.n	8005238 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80051c6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80051c8:	f04f 32ff 	mov.w	r2, #4294967295
 80051cc:	69f9      	ldr	r1, [r7, #28]
 80051ce:	6938      	ldr	r0, [r7, #16]
 80051d0:	f7ff fe4f 	bl	8004e72 <put_fat>
 80051d4:	4603      	mov	r3, r0
 80051d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <create_chain+0xe2>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d006      	beq.n	80051f2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	6938      	ldr	r0, [r7, #16]
 80051ea:	f7ff fe42 	bl	8004e72 <put_fat>
 80051ee:	4603      	mov	r3, r0
 80051f0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d116      	bne.n	8005226 <create_chain+0x116>
		fs->last_clst = ncl;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	3b02      	subs	r3, #2
 8005208:	429a      	cmp	r2, r3
 800520a:	d804      	bhi.n	8005216 <create_chain+0x106>
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	1e5a      	subs	r2, r3, #1
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	791b      	ldrb	r3, [r3, #4]
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	b2da      	uxtb	r2, r3
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	711a      	strb	r2, [r3, #4]
 8005224:	e007      	b.n	8005236 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005226:	7dfb      	ldrb	r3, [r7, #23]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d102      	bne.n	8005232 <create_chain+0x122>
 800522c:	f04f 33ff 	mov.w	r3, #4294967295
 8005230:	e000      	b.n	8005234 <create_chain+0x124>
 8005232:	2301      	movs	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005236:	69fb      	ldr	r3, [r7, #28]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	3304      	adds	r3, #4
 8005256:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	0a5b      	lsrs	r3, r3, #9
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	8952      	ldrh	r2, [r2, #10]
 8005260:	fbb3 f3f2 	udiv	r3, r3, r2
 8005264:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1d1a      	adds	r2, r3, #4
 800526a:	613a      	str	r2, [r7, #16]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <clmt_clust+0x3a>
 8005276:	2300      	movs	r3, #0
 8005278:	e010      	b.n	800529c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d307      	bcc.n	8005292 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3304      	adds	r3, #4
 800528e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005290:	e7e9      	b.n	8005266 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005292:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4413      	add	r3, r2
}
 800529c:	4618      	mov	r0, r3
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052be:	d204      	bcs.n	80052ca <dir_sdi+0x22>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	f003 031f 	and.w	r3, r3, #31
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <dir_sdi+0x26>
		return FR_INT_ERR;
 80052ca:	2302      	movs	r3, #2
 80052cc:	e063      	b.n	8005396 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <dir_sdi+0x46>
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d902      	bls.n	80052ee <dir_sdi+0x46>
		clst = fs->dirbase;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10c      	bne.n	800530e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	8912      	ldrh	r2, [r2, #8]
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d301      	bcc.n	8005304 <dir_sdi+0x5c>
 8005300:	2302      	movs	r3, #2
 8005302:	e048      	b.n	8005396 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	61da      	str	r2, [r3, #28]
 800530c:	e029      	b.n	8005362 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	895b      	ldrh	r3, [r3, #10]
 8005312:	025b      	lsls	r3, r3, #9
 8005314:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005316:	e019      	b.n	800534c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6979      	ldr	r1, [r7, #20]
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fd00 	bl	8004d22 <get_fat>
 8005322:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d101      	bne.n	8005330 <dir_sdi+0x88>
 800532c:	2301      	movs	r3, #1
 800532e:	e032      	b.n	8005396 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d904      	bls.n	8005340 <dir_sdi+0x98>
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	429a      	cmp	r2, r3
 800533e:	d301      	bcc.n	8005344 <dir_sdi+0x9c>
 8005340:	2302      	movs	r3, #2
 8005342:	e028      	b.n	8005396 <dir_sdi+0xee>
			ofs -= csz;
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	429a      	cmp	r2, r3
 8005352:	d2e1      	bcs.n	8005318 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005354:	6979      	ldr	r1, [r7, #20]
 8005356:	6938      	ldr	r0, [r7, #16]
 8005358:	f7ff fcc4 	bl	8004ce4 <clust2sect>
 800535c:	4602      	mov	r2, r0
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <dir_sdi+0xcc>
 8005370:	2302      	movs	r3, #2
 8005372:	e010      	b.n	8005396 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	0a5b      	lsrs	r3, r3, #9
 800537c:	441a      	add	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	441a      	add	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	3320      	adds	r3, #32
 80053b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <dir_next+0x28>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c4:	d301      	bcc.n	80053ca <dir_next+0x2c>
 80053c6:	2304      	movs	r3, #4
 80053c8:	e0aa      	b.n	8005520 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f040 8098 	bne.w	8005506 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	8912      	ldrh	r2, [r2, #8]
 80053f0:	4293      	cmp	r3, r2
 80053f2:	f0c0 8088 	bcc.w	8005506 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	61da      	str	r2, [r3, #28]
 80053fc:	2304      	movs	r3, #4
 80053fe:	e08f      	b.n	8005520 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	0a5b      	lsrs	r3, r3, #9
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	8952      	ldrh	r2, [r2, #10]
 8005408:	3a01      	subs	r2, #1
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d17a      	bne.n	8005506 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f7ff fc82 	bl	8004d22 <get_fat>
 800541e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d801      	bhi.n	800542a <dir_next+0x8c>
 8005426:	2302      	movs	r3, #2
 8005428:	e07a      	b.n	8005520 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d101      	bne.n	8005436 <dir_next+0x98>
 8005432:	2301      	movs	r3, #1
 8005434:	e074      	b.n	8005520 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	429a      	cmp	r2, r3
 800543e:	d358      	bcc.n	80054f2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d104      	bne.n	8005450 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	61da      	str	r2, [r3, #28]
 800544c:	2304      	movs	r3, #4
 800544e:	e067      	b.n	8005520 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f7ff fe59 	bl	8005110 <create_chain>
 800545e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <dir_next+0xcc>
 8005466:	2307      	movs	r3, #7
 8005468:	e05a      	b.n	8005520 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <dir_next+0xd6>
 8005470:	2302      	movs	r3, #2
 8005472:	e055      	b.n	8005520 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d101      	bne.n	8005480 <dir_next+0xe2>
 800547c:	2301      	movs	r3, #1
 800547e:	e04f      	b.n	8005520 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff fb4f 	bl	8004b24 <sync_window>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <dir_next+0xf2>
 800548c:	2301      	movs	r3, #1
 800548e:	e047      	b.n	8005520 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3330      	adds	r3, #48	; 0x30
 8005494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff f979 	bl	8004792 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80054a0:	2300      	movs	r3, #0
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	6979      	ldr	r1, [r7, #20]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7ff fc1c 	bl	8004ce4 <clust2sect>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80054b2:	e012      	b.n	80054da <dir_next+0x13c>
						fs->wflag = 1;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7ff fb32 	bl	8004b24 <sync_window>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <dir_next+0x12c>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e02a      	b.n	8005520 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3301      	adds	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	895b      	ldrh	r3, [r3, #10]
 80054de:	461a      	mov	r2, r3
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d3e6      	bcc.n	80054b4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad2      	subs	r2, r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80054f8:	6979      	ldr	r1, [r7, #20]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f7ff fbf2 	bl	8004ce4 <clust2sect>
 8005500:	4602      	mov	r2, r0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005518:	441a      	add	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005538:	2100      	movs	r1, #0
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff feb4 	bl	80052a8 <dir_sdi>
 8005540:	4603      	mov	r3, r0
 8005542:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d12b      	bne.n	80055a2 <dir_alloc+0x7a>
		n = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4619      	mov	r1, r3
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7ff fb29 	bl	8004bac <move_window>
 800555a:	4603      	mov	r3, r0
 800555c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11d      	bne.n	80055a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2be5      	cmp	r3, #229	; 0xe5
 800556c:	d004      	beq.n	8005578 <dir_alloc+0x50>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d107      	bne.n	8005588 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	3301      	adds	r3, #1
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d102      	bne.n	800558c <dir_alloc+0x64>
 8005586:	e00c      	b.n	80055a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800558c:	2101      	movs	r1, #1
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff ff05 	bl	800539e <dir_next>
 8005594:	4603      	mov	r3, r0
 8005596:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0d7      	beq.n	800554e <dir_alloc+0x26>
 800559e:	e000      	b.n	80055a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80055a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80055a2:	7dfb      	ldrb	r3, [r7, #23]
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d101      	bne.n	80055ac <dir_alloc+0x84>
 80055a8:	2307      	movs	r3, #7
 80055aa:	75fb      	strb	r3, [r7, #23]
	return res;
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	331a      	adds	r3, #26
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff f841 	bl	800464c <ld_word>
 80055ca:	4603      	mov	r3, r0
 80055cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d109      	bne.n	80055ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff f836 	bl	800464c <ld_word>
 80055e0:	4603      	mov	r3, r0
 80055e2:	041b      	lsls	r3, r3, #16
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80055ea:	68fb      	ldr	r3, [r7, #12]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	331a      	adds	r3, #26
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	b292      	uxth	r2, r2
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff f859 	bl	80046c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d109      	bne.n	800562c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f103 0214 	add.w	r2, r3, #20
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	b29b      	uxth	r3, r3
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f7ff f84b 	bl	80046c2 <st_word>
	}
}
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005642:	2100      	movs	r1, #0
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff fe2f 	bl	80052a8 <dir_sdi>
 800564a:	4603      	mov	r3, r0
 800564c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800564e:	7dfb      	ldrb	r3, [r7, #23]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <dir_find+0x24>
 8005654:	7dfb      	ldrb	r3, [r7, #23]
 8005656:	e03e      	b.n	80056d6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4619      	mov	r1, r3
 800565e:	6938      	ldr	r0, [r7, #16]
 8005660:	f7ff faa4 	bl	8004bac <move_window>
 8005664:	4603      	mov	r3, r0
 8005666:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d12f      	bne.n	80056ce <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <dir_find+0x4e>
 800567c:	2304      	movs	r3, #4
 800567e:	75fb      	strb	r3, [r7, #23]
 8005680:	e028      	b.n	80056d4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	330b      	adds	r3, #11
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800568e:	b2da      	uxtb	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	330b      	adds	r3, #11
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <dir_find+0x86>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a18      	ldr	r0, [r3, #32]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3324      	adds	r3, #36	; 0x24
 80056ac:	220b      	movs	r2, #11
 80056ae:	4619      	mov	r1, r3
 80056b0:	f7ff f88a 	bl	80047c8 <mem_cmp>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00b      	beq.n	80056d2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80056ba:	2100      	movs	r1, #0
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fe6e 	bl	800539e <dir_next>
 80056c2:	4603      	mov	r3, r0
 80056c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0c5      	beq.n	8005658 <dir_find+0x24>
 80056cc:	e002      	b.n	80056d4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80056d2:	bf00      	nop

	return res;
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80056ec:	2101      	movs	r1, #1
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff ff1a 	bl	8005528 <dir_alloc>
 80056f4:	4603      	mov	r3, r0
 80056f6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d11c      	bne.n	8005738 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	4619      	mov	r1, r3
 8005704:	68b8      	ldr	r0, [r7, #8]
 8005706:	f7ff fa51 	bl	8004bac <move_window>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d111      	bne.n	8005738 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	2220      	movs	r2, #32
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff f838 	bl	8004792 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a18      	ldr	r0, [r3, #32]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3324      	adds	r3, #36	; 0x24
 800572a:	220b      	movs	r2, #11
 800572c:	4619      	mov	r1, r3
 800572e:	f7ff f80f 	bl	8004750 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2201      	movs	r2, #1
 8005736:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3324      	adds	r3, #36	; 0x24
 8005758:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800575a:	220b      	movs	r2, #11
 800575c:	2120      	movs	r1, #32
 800575e:	68b8      	ldr	r0, [r7, #8]
 8005760:	f7ff f817 	bl	8004792 <mem_set>
	si = i = 0; ni = 8;
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	2308      	movs	r3, #8
 800576e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	61fa      	str	r2, [r7, #28]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4413      	add	r3, r2
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800577e:	7efb      	ldrb	r3, [r7, #27]
 8005780:	2b20      	cmp	r3, #32
 8005782:	d94e      	bls.n	8005822 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005784:	7efb      	ldrb	r3, [r7, #27]
 8005786:	2b2f      	cmp	r3, #47	; 0x2f
 8005788:	d006      	beq.n	8005798 <create_name+0x54>
 800578a:	7efb      	ldrb	r3, [r7, #27]
 800578c:	2b5c      	cmp	r3, #92	; 0x5c
 800578e:	d110      	bne.n	80057b2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005790:	e002      	b.n	8005798 <create_name+0x54>
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	3301      	adds	r3, #1
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b2f      	cmp	r3, #47	; 0x2f
 80057a2:	d0f6      	beq.n	8005792 <create_name+0x4e>
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b5c      	cmp	r3, #92	; 0x5c
 80057ae:	d0f0      	beq.n	8005792 <create_name+0x4e>
			break;
 80057b0:	e038      	b.n	8005824 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80057b2:	7efb      	ldrb	r3, [r7, #27]
 80057b4:	2b2e      	cmp	r3, #46	; 0x2e
 80057b6:	d003      	beq.n	80057c0 <create_name+0x7c>
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d30c      	bcc.n	80057da <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b0b      	cmp	r3, #11
 80057c4:	d002      	beq.n	80057cc <create_name+0x88>
 80057c6:	7efb      	ldrb	r3, [r7, #27]
 80057c8:	2b2e      	cmp	r3, #46	; 0x2e
 80057ca:	d001      	beq.n	80057d0 <create_name+0x8c>
 80057cc:	2306      	movs	r3, #6
 80057ce:	e044      	b.n	800585a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80057d0:	2308      	movs	r3, #8
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	230b      	movs	r3, #11
 80057d6:	617b      	str	r3, [r7, #20]
			continue;
 80057d8:	e022      	b.n	8005820 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80057da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	da04      	bge.n	80057ec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80057e2:	7efb      	ldrb	r3, [r7, #27]
 80057e4:	3b80      	subs	r3, #128	; 0x80
 80057e6:	4a1f      	ldr	r2, [pc, #124]	; (8005864 <create_name+0x120>)
 80057e8:	5cd3      	ldrb	r3, [r2, r3]
 80057ea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80057ec:	7efb      	ldrb	r3, [r7, #27]
 80057ee:	4619      	mov	r1, r3
 80057f0:	481d      	ldr	r0, [pc, #116]	; (8005868 <create_name+0x124>)
 80057f2:	f7ff f810 	bl	8004816 <chk_chr>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <create_name+0xbc>
 80057fc:	2306      	movs	r3, #6
 80057fe:	e02c      	b.n	800585a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005800:	7efb      	ldrb	r3, [r7, #27]
 8005802:	2b60      	cmp	r3, #96	; 0x60
 8005804:	d905      	bls.n	8005812 <create_name+0xce>
 8005806:	7efb      	ldrb	r3, [r7, #27]
 8005808:	2b7a      	cmp	r3, #122	; 0x7a
 800580a:	d802      	bhi.n	8005812 <create_name+0xce>
 800580c:	7efb      	ldrb	r3, [r7, #27]
 800580e:	3b20      	subs	r3, #32
 8005810:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	613a      	str	r2, [r7, #16]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	4413      	add	r3, r2
 800581c:	7efa      	ldrb	r2, [r7, #27]
 800581e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005820:	e7a6      	b.n	8005770 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005822:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	441a      	add	r2, r3
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <create_name+0xf4>
 8005834:	2306      	movs	r3, #6
 8005836:	e010      	b.n	800585a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2be5      	cmp	r3, #229	; 0xe5
 800583e:	d102      	bne.n	8005846 <create_name+0x102>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2205      	movs	r2, #5
 8005844:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005846:	7efb      	ldrb	r3, [r7, #27]
 8005848:	2b20      	cmp	r3, #32
 800584a:	d801      	bhi.n	8005850 <create_name+0x10c>
 800584c:	2204      	movs	r2, #4
 800584e:	e000      	b.n	8005852 <create_name+0x10e>
 8005850:	2200      	movs	r2, #0
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	330b      	adds	r3, #11
 8005856:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005858:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	0800735c 	.word	0x0800735c
 8005868:	08007300 	.word	0x08007300

0800586c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005880:	e002      	b.n	8005888 <follow_path+0x1c>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	3301      	adds	r3, #1
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b2f      	cmp	r3, #47	; 0x2f
 800588e:	d0f8      	beq.n	8005882 <follow_path+0x16>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b5c      	cmp	r3, #92	; 0x5c
 8005896:	d0f4      	beq.n	8005882 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2200      	movs	r2, #0
 800589c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b1f      	cmp	r3, #31
 80058a4:	d80a      	bhi.n	80058bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80058ae:	2100      	movs	r1, #0
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fcf9 	bl	80052a8 <dir_sdi>
 80058b6:	4603      	mov	r3, r0
 80058b8:	75fb      	strb	r3, [r7, #23]
 80058ba:	e043      	b.n	8005944 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80058bc:	463b      	mov	r3, r7
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff ff3f 	bl	8005744 <create_name>
 80058c6:	4603      	mov	r3, r0
 80058c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d134      	bne.n	800593a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff feaf 	bl	8005634 <dir_find>
 80058d6:	4603      	mov	r3, r0
 80058d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80058e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d127      	bne.n	800593e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80058ee:	7afb      	ldrb	r3, [r7, #11]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d122      	bne.n	800593e <follow_path+0xd2>
 80058f8:	2305      	movs	r3, #5
 80058fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80058fc:	e01f      	b.n	800593e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80058fe:	7afb      	ldrb	r3, [r7, #11]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d11c      	bne.n	8005942 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	799b      	ldrb	r3, [r3, #6]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005914:	2305      	movs	r3, #5
 8005916:	75fb      	strb	r3, [r7, #23]
 8005918:	e014      	b.n	8005944 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005928:	4413      	add	r3, r2
 800592a:	4619      	mov	r1, r3
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f7ff fe42 	bl	80055b6 <ld_clust>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005938:	e7c0      	b.n	80058bc <follow_path+0x50>
			if (res != FR_OK) break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <follow_path+0xd8>
				break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005942:	bf00      	nop
			}
		}
	}

	return res;
 8005944:	7dfb      	ldrb	r3, [r7, #23]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800594e:	b480      	push	{r7}
 8005950:	b087      	sub	sp, #28
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d031      	beq.n	80059c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e002      	b.n	8005972 <get_ldnumber+0x24>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3301      	adds	r3, #1
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b20      	cmp	r3, #32
 8005978:	d903      	bls.n	8005982 <get_ldnumber+0x34>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b3a      	cmp	r3, #58	; 0x3a
 8005980:	d1f4      	bne.n	800596c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b3a      	cmp	r3, #58	; 0x3a
 8005988:	d11c      	bne.n	80059c4 <get_ldnumber+0x76>
			tp = *path;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	60fa      	str	r2, [r7, #12]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	3b30      	subs	r3, #48	; 0x30
 800599a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b09      	cmp	r3, #9
 80059a0:	d80e      	bhi.n	80059c0 <get_ldnumber+0x72>
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d10a      	bne.n	80059c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <get_ldnumber+0x72>
					vol = (int)i;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	3301      	adds	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	e002      	b.n	80059ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80059c4:	2300      	movs	r3, #0
 80059c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80059c8:	693b      	ldr	r3, [r7, #16]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	70da      	strb	r2, [r3, #3]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff f8da 	bl	8004bac <move_window>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <check_fs+0x2a>
 80059fe:	2304      	movs	r3, #4
 8005a00:	e038      	b.n	8005a74 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3330      	adds	r3, #48	; 0x30
 8005a06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fe1e 	bl	800464c <ld_word>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <check_fs+0x48>
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e029      	b.n	8005a74 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a26:	2be9      	cmp	r3, #233	; 0xe9
 8005a28:	d009      	beq.n	8005a3e <check_fs+0x66>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a30:	2beb      	cmp	r3, #235	; 0xeb
 8005a32:	d11e      	bne.n	8005a72 <check_fs+0x9a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005a3a:	2b90      	cmp	r3, #144	; 0x90
 8005a3c:	d119      	bne.n	8005a72 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3330      	adds	r3, #48	; 0x30
 8005a42:	3336      	adds	r3, #54	; 0x36
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe fe19 	bl	800467c <ld_dword>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a50:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <check_fs+0xa4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d101      	bne.n	8005a5a <check_fs+0x82>
 8005a56:	2300      	movs	r3, #0
 8005a58:	e00c      	b.n	8005a74 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3330      	adds	r3, #48	; 0x30
 8005a5e:	3352      	adds	r3, #82	; 0x52
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe fe0b 	bl	800467c <ld_dword>
 8005a66:	4603      	mov	r3, r0
 8005a68:	4a05      	ldr	r2, [pc, #20]	; (8005a80 <check_fs+0xa8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d101      	bne.n	8005a72 <check_fs+0x9a>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005a72:	2302      	movs	r3, #2
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	00544146 	.word	0x00544146
 8005a80:	33544146 	.word	0x33544146

08005a84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b096      	sub	sp, #88	; 0x58
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f7ff ff58 	bl	800594e <get_ldnumber>
 8005a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	da01      	bge.n	8005aaa <find_volume+0x26>
 8005aa6:	230b      	movs	r3, #11
 8005aa8:	e22d      	b.n	8005f06 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005aaa:	4aa1      	ldr	r2, [pc, #644]	; (8005d30 <find_volume+0x2ac>)
 8005aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <find_volume+0x3a>
 8005aba:	230c      	movs	r3, #12
 8005abc:	e223      	b.n	8005f06 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ac2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01a      	beq.n	8005b0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fe fd19 	bl	8004510 <disk_status>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005ae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10c      	bne.n	8005b0a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <find_volume+0x82>
 8005af6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005b02:	230a      	movs	r3, #10
 8005b04:	e1ff      	b.n	8005f06 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005b06:	2300      	movs	r3, #0
 8005b08:	e1fd      	b.n	8005f06 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe fd11 	bl	8004544 <disk_initialize>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005b28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005b34:	2303      	movs	r3, #3
 8005b36:	e1e6      	b.n	8005f06 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <find_volume+0xca>
 8005b3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005b4a:	230a      	movs	r3, #10
 8005b4c:	e1db      	b.n	8005f06 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005b52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b56:	f7ff ff3f 	bl	80059d8 <check_fs>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d149      	bne.n	8005bfc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005b68:	2300      	movs	r3, #0
 8005b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b6c:	e01e      	b.n	8005bac <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005b7c:	4413      	add	r3, r2
 8005b7e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	3304      	adds	r3, #4
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d006      	beq.n	8005b98 <find_volume+0x114>
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fd74 	bl	800467c <ld_dword>
 8005b94:	4602      	mov	r2, r0
 8005b96:	e000      	b.n	8005b9a <find_volume+0x116>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	3358      	adds	r3, #88	; 0x58
 8005ba0:	443b      	add	r3, r7
 8005ba2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba8:	3301      	adds	r3, #1
 8005baa:	643b      	str	r3, [r7, #64]	; 0x40
 8005bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d9dd      	bls.n	8005b6e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <find_volume+0x13e>
 8005bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	3358      	adds	r3, #88	; 0x58
 8005bc8:	443b      	add	r3, r7
 8005bca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005bce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <find_volume+0x15e>
 8005bd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bda:	f7ff fefd 	bl	80059d8 <check_fs>
 8005bde:	4603      	mov	r3, r0
 8005be0:	e000      	b.n	8005be4 <find_volume+0x160>
 8005be2:	2303      	movs	r3, #3
 8005be4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005be8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d905      	bls.n	8005bfc <find_volume+0x178>
 8005bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d9e2      	bls.n	8005bc2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d101      	bne.n	8005c08 <find_volume+0x184>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e17e      	b.n	8005f06 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d901      	bls.n	8005c14 <find_volume+0x190>
 8005c10:	230d      	movs	r3, #13
 8005c12:	e178      	b.n	8005f06 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	3330      	adds	r3, #48	; 0x30
 8005c18:	330b      	adds	r3, #11
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fe fd16 	bl	800464c <ld_word>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c26:	d001      	beq.n	8005c2c <find_volume+0x1a8>
 8005c28:	230d      	movs	r3, #13
 8005c2a:	e16c      	b.n	8005f06 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	3330      	adds	r3, #48	; 0x30
 8005c30:	3316      	adds	r3, #22
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fd0a 	bl	800464c <ld_word>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <find_volume+0x1cc>
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	3330      	adds	r3, #48	; 0x30
 8005c46:	3324      	adds	r3, #36	; 0x24
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fd17 	bl	800467c <ld_dword>
 8005c4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c54:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	789b      	ldrb	r3, [r3, #2]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d005      	beq.n	8005c74 <find_volume+0x1f0>
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	789b      	ldrb	r3, [r3, #2]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d001      	beq.n	8005c74 <find_volume+0x1f0>
 8005c70:	230d      	movs	r3, #13
 8005c72:	e148      	b.n	8005f06 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	789b      	ldrb	r3, [r3, #2]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7c:	fb02 f303 	mul.w	r3, r2, r3
 8005c80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	895b      	ldrh	r3, [r3, #10]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d008      	beq.n	8005ca8 <find_volume+0x224>
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	895b      	ldrh	r3, [r3, #10]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	895b      	ldrh	r3, [r3, #10]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <find_volume+0x228>
 8005ca8:	230d      	movs	r3, #13
 8005caa:	e12c      	b.n	8005f06 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	3330      	adds	r3, #48	; 0x30
 8005cb0:	3311      	adds	r3, #17
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fcca 	bl	800464c <ld_word>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	891b      	ldrh	r3, [r3, #8]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <find_volume+0x24e>
 8005cce:	230d      	movs	r3, #13
 8005cd0:	e119      	b.n	8005f06 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	3330      	adds	r3, #48	; 0x30
 8005cd6:	3313      	adds	r3, #19
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe fcb7 	bl	800464c <ld_word>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <find_volume+0x272>
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	3330      	adds	r3, #48	; 0x30
 8005cec:	3320      	adds	r3, #32
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fcc4 	bl	800467c <ld_dword>
 8005cf4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	3330      	adds	r3, #48	; 0x30
 8005cfa:	330e      	adds	r3, #14
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe fca5 	bl	800464c <ld_word>
 8005d02:	4603      	mov	r3, r0
 8005d04:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <find_volume+0x28c>
 8005d0c:	230d      	movs	r3, #13
 8005d0e:	e0fa      	b.n	8005f06 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005d10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d14:	4413      	add	r3, r2
 8005d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d18:	8912      	ldrh	r2, [r2, #8]
 8005d1a:	0912      	lsrs	r2, r2, #4
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	4413      	add	r3, r2
 8005d20:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d204      	bcs.n	8005d34 <find_volume+0x2b0>
 8005d2a:	230d      	movs	r3, #13
 8005d2c:	e0eb      	b.n	8005f06 <find_volume+0x482>
 8005d2e:	bf00      	nop
 8005d30:	20000190 	.word	0x20000190
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d3c:	8952      	ldrh	r2, [r2, #10]
 8005d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <find_volume+0x2ca>
 8005d4a:	230d      	movs	r3, #13
 8005d4c:	e0db      	b.n	8005f06 <find_volume+0x482>
		fmt = FS_FAT32;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d802      	bhi.n	8005d64 <find_volume+0x2e0>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d802      	bhi.n	8005d74 <find_volume+0x2f0>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	1c9a      	adds	r2, r3, #2
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d80:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005d82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d86:	441a      	add	r2, r3
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005d8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	441a      	add	r2, r3
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005d96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d11e      	bne.n	8005ddc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	3330      	adds	r3, #48	; 0x30
 8005da2:	332a      	adds	r3, #42	; 0x2a
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fe fc51 	bl	800464c <ld_word>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <find_volume+0x330>
 8005db0:	230d      	movs	r3, #13
 8005db2:	e0a8      	b.n	8005f06 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	891b      	ldrh	r3, [r3, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <find_volume+0x33c>
 8005dbc:	230d      	movs	r3, #13
 8005dbe:	e0a2      	b.n	8005f06 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	3330      	adds	r3, #48	; 0x30
 8005dc4:	332c      	adds	r3, #44	; 0x2c
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fc58 	bl	800467c <ld_dword>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dda:	e01f      	b.n	8005e1c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	891b      	ldrh	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <find_volume+0x364>
 8005de4:	230d      	movs	r3, #13
 8005de6:	e08e      	b.n	8005f06 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dee:	441a      	add	r2, r3
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005df4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d103      	bne.n	8005e04 <find_volume+0x380>
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	e00a      	b.n	8005e1a <find_volume+0x396>
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	695a      	ldr	r2, [r3, #20]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	4413      	add	r3, r2
 8005e0e:	085a      	lsrs	r2, r3, #1
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005e1a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e22:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005e26:	0a5b      	lsrs	r3, r3, #9
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d201      	bcs.n	8005e30 <find_volume+0x3ac>
 8005e2c:	230d      	movs	r3, #13
 8005e2e:	e06a      	b.n	8005f06 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	f04f 32ff 	mov.w	r2, #4294967295
 8005e36:	611a      	str	r2, [r3, #16]
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	2280      	movs	r2, #128	; 0x80
 8005e44:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005e46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d149      	bne.n	8005ee2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	3330      	adds	r3, #48	; 0x30
 8005e52:	3330      	adds	r3, #48	; 0x30
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe fbf9 	bl	800464c <ld_word>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d140      	bne.n	8005ee2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e62:	3301      	adds	r3, #1
 8005e64:	4619      	mov	r1, r3
 8005e66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e68:	f7fe fea0 	bl	8004bac <move_window>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d137      	bne.n	8005ee2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	2200      	movs	r2, #0
 8005e76:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	3330      	adds	r3, #48	; 0x30
 8005e7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fe fbe3 	bl	800464c <ld_word>
 8005e86:	4603      	mov	r3, r0
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d127      	bne.n	8005ee2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	3330      	adds	r3, #48	; 0x30
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fbf0 	bl	800467c <ld_dword>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <find_volume+0x48c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d11e      	bne.n	8005ee2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	3330      	adds	r3, #48	; 0x30
 8005ea8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe fbe5 	bl	800467c <ld_dword>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <find_volume+0x490>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d113      	bne.n	8005ee2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	3330      	adds	r3, #48	; 0x30
 8005ebe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fbda 	bl	800467c <ld_dword>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	3330      	adds	r3, #48	; 0x30
 8005ed2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fbd0 	bl	800467c <ld_dword>
 8005edc:	4602      	mov	r2, r0
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ee8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005eea:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <find_volume+0x494>)
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <find_volume+0x494>)
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <find_volume+0x494>)
 8005ef8:	881a      	ldrh	r2, [r3, #0]
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005efe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f00:	f7fe fdec 	bl	8004adc <clear_lock>
#endif
	return FR_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3758      	adds	r7, #88	; 0x58
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	41615252 	.word	0x41615252
 8005f14:	61417272 	.word	0x61417272
 8005f18:	20000194 	.word	0x20000194

08005f1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005f26:	2309      	movs	r3, #9
 8005f28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01c      	beq.n	8005f6a <validate+0x4e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d018      	beq.n	8005f6a <validate+0x4e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d013      	beq.n	8005f6a <validate+0x4e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	889a      	ldrh	r2, [r3, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	88db      	ldrh	r3, [r3, #6]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d10c      	bne.n	8005f6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fe fada 	bl	8004510 <disk_status>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <validate+0x4e>
			res = FR_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d102      	bne.n	8005f76 <validate+0x5a>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	e000      	b.n	8005f78 <validate+0x5c>
 8005f76:	2300      	movs	r3, #0
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	6013      	str	r3, [r2, #0]
	return res;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005f9a:	f107 0310 	add.w	r3, r7, #16
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fcd5 	bl	800594e <get_ldnumber>
 8005fa4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	da01      	bge.n	8005fb0 <f_mount+0x28>
 8005fac:	230b      	movs	r3, #11
 8005fae:	e02b      	b.n	8006008 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005fb0:	4a17      	ldr	r2, [pc, #92]	; (8006010 <f_mount+0x88>)
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005fc0:	69b8      	ldr	r0, [r7, #24]
 8005fc2:	f7fe fd8b 	bl	8004adc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	490d      	ldr	r1, [pc, #52]	; (8006010 <f_mount+0x88>)
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <f_mount+0x66>
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d001      	beq.n	8005ff2 <f_mount+0x6a>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e00a      	b.n	8006008 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005ff2:	f107 010c 	add.w	r1, r7, #12
 8005ff6:	f107 0308 	add.w	r3, r7, #8
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fd41 	bl	8005a84 <find_volume>
 8006002:	4603      	mov	r3, r0
 8006004:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006006:	7dfb      	ldrb	r3, [r7, #23]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000190 	.word	0x20000190

08006014 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b098      	sub	sp, #96	; 0x60
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <f_open+0x18>
 8006028:	2309      	movs	r3, #9
 800602a:	e1ad      	b.n	8006388 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006032:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006034:	79fa      	ldrb	r2, [r7, #7]
 8006036:	f107 0110 	add.w	r1, r7, #16
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff fd20 	bl	8005a84 <find_volume>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800604a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800604e:	2b00      	cmp	r3, #0
 8006050:	f040 8191 	bne.w	8006376 <f_open+0x362>
		dj.obj.fs = fs;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	f107 0314 	add.w	r3, r7, #20
 800605e:	4611      	mov	r1, r2
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff fc03 	bl	800586c <follow_path>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800606c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11a      	bne.n	80060aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006074:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006078:	b25b      	sxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	da03      	bge.n	8006086 <f_open+0x72>
				res = FR_INVALID_NAME;
 800607e:	2306      	movs	r3, #6
 8006080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006084:	e011      	b.n	80060aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	bf14      	ite	ne
 8006090:	2301      	movne	r3, #1
 8006092:	2300      	moveq	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	f107 0314 	add.w	r3, r7, #20
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fbd4 	bl	800484c <chk_lock>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	f003 031c 	and.w	r3, r3, #28
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d07f      	beq.n	80061b4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80060b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d017      	beq.n	80060ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80060bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d10e      	bne.n	80060e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80060c4:	f7fe fc1e 	bl	8004904 <enq_lock>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d006      	beq.n	80060dc <f_open+0xc8>
 80060ce:	f107 0314 	add.w	r3, r7, #20
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fb03 	bl	80056de <dir_register>
 80060d8:	4603      	mov	r3, r0
 80060da:	e000      	b.n	80060de <f_open+0xca>
 80060dc:	2312      	movs	r3, #18
 80060de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	f043 0308 	orr.w	r3, r3, #8
 80060e8:	71fb      	strb	r3, [r7, #7]
 80060ea:	e010      	b.n	800610e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80060ec:	7ebb      	ldrb	r3, [r7, #26]
 80060ee:	f003 0311 	and.w	r3, r3, #17
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <f_open+0xea>
					res = FR_DENIED;
 80060f6:	2307      	movs	r3, #7
 80060f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80060fc:	e007      	b.n	800610e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <f_open+0xfa>
 8006108:	2308      	movs	r3, #8
 800610a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800610e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006112:	2b00      	cmp	r3, #0
 8006114:	d168      	bne.n	80061e8 <f_open+0x1d4>
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d063      	beq.n	80061e8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006120:	f7fd fcb8 	bl	8003a94 <get_fattime>
 8006124:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	330e      	adds	r3, #14
 800612a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800612c:	4618      	mov	r0, r3
 800612e:	f7fe fae3 	bl	80046f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	3316      	adds	r3, #22
 8006136:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006138:	4618      	mov	r0, r3
 800613a:	f7fe fadd 	bl	80046f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006140:	330b      	adds	r3, #11
 8006142:	2220      	movs	r2, #32
 8006144:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff fa32 	bl	80055b6 <ld_clust>
 8006152:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006158:	2200      	movs	r2, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fa4a 	bl	80055f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006162:	331c      	adds	r3, #28
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe fac6 	bl	80046f8 <st_dword>
					fs->wflag = 1;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2201      	movs	r2, #1
 8006170:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d037      	beq.n	80061e8 <f_open+0x1d4>
						dw = fs->winsect;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800617e:	f107 0314 	add.w	r3, r7, #20
 8006182:	2200      	movs	r2, #0
 8006184:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe ff5d 	bl	8005046 <remove_chain>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006196:	2b00      	cmp	r3, #0
 8006198:	d126      	bne.n	80061e8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fd04 	bl	8004bac <move_window>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061ae:	3a01      	subs	r2, #1
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	e019      	b.n	80061e8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80061b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d115      	bne.n	80061e8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80061bc:	7ebb      	ldrb	r3, [r7, #26]
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <f_open+0x1ba>
					res = FR_NO_FILE;
 80061c6:	2304      	movs	r3, #4
 80061c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80061cc:	e00c      	b.n	80061e8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <f_open+0x1d4>
 80061d8:	7ebb      	ldrb	r3, [r7, #26]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <f_open+0x1d4>
						res = FR_DENIED;
 80061e2:	2307      	movs	r3, #7
 80061e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80061e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d128      	bne.n	8006242 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006200:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800620a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	f023 0301 	bic.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	bf14      	ite	ne
 800621a:	2301      	movne	r3, #1
 800621c:	2300      	moveq	r3, #0
 800621e:	b2db      	uxtb	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	f107 0314 	add.w	r3, r7, #20
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fb8d 	bl	8004948 <inc_lock>
 800622e:	4602      	mov	r2, r0
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <f_open+0x22e>
 800623c:	2302      	movs	r3, #2
 800623e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 8095 	bne.w	8006376 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff f9af 	bl	80055b6 <ld_clust>
 8006258:	4602      	mov	r2, r0
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	331c      	adds	r3, #28
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fa0a 	bl	800467c <ld_dword>
 8006268:	4602      	mov	r2, r0
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	88da      	ldrh	r2, [r3, #6]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	79fa      	ldrb	r2, [r7, #7]
 8006286:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3330      	adds	r3, #48	; 0x30
 800629e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe fa74 	bl	8004792 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d060      	beq.n	8006376 <f_open+0x362>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d05c      	beq.n	8006376 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	895b      	ldrh	r3, [r3, #10]
 80062c8:	025b      	lsls	r3, r3, #9
 80062ca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	657b      	str	r3, [r7, #84]	; 0x54
 80062d8:	e016      	b.n	8006308 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fd1f 	bl	8004d22 <get_fat>
 80062e4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80062e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d802      	bhi.n	80062f2 <f_open+0x2de>
 80062ec:	2302      	movs	r3, #2
 80062ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80062f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d102      	bne.n	8006300 <f_open+0x2ec>
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	657b      	str	r3, [r7, #84]	; 0x54
 8006308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800630c:	2b00      	cmp	r3, #0
 800630e:	d103      	bne.n	8006318 <f_open+0x304>
 8006310:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006314:	429a      	cmp	r2, r3
 8006316:	d8e0      	bhi.n	80062da <f_open+0x2c6>
				}
				fp->clust = clst;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800631c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800631e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006322:	2b00      	cmp	r3, #0
 8006324:	d127      	bne.n	8006376 <f_open+0x362>
 8006326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632c:	2b00      	cmp	r3, #0
 800632e:	d022      	beq.n	8006376 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe fcd5 	bl	8004ce4 <clust2sect>
 800633a:	6478      	str	r0, [r7, #68]	; 0x44
 800633c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633e:	2b00      	cmp	r3, #0
 8006340:	d103      	bne.n	800634a <f_open+0x336>
						res = FR_INT_ERR;
 8006342:	2302      	movs	r3, #2
 8006344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006348:	e015      	b.n	8006376 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800634a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800634c:	0a5a      	lsrs	r2, r3, #9
 800634e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	7858      	ldrb	r0, [r3, #1]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a1a      	ldr	r2, [r3, #32]
 8006364:	2301      	movs	r3, #1
 8006366:	f7fe f913 	bl	8004590 <disk_read>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <f_open+0x362>
 8006370:	2301      	movs	r3, #1
 8006372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <f_open+0x370>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006388:	4618      	mov	r0, r3
 800638a:	3760      	adds	r7, #96	; 0x60
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08c      	sub	sp, #48	; 0x30
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f107 0210 	add.w	r2, r7, #16
 80063ae:	4611      	mov	r1, r2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fdb3 	bl	8005f1c <validate>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80063bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d107      	bne.n	80063d4 <f_write+0x44>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	7d5b      	ldrb	r3, [r3, #21]
 80063c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80063cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <f_write+0x4a>
 80063d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063d8:	e14b      	b.n	8006672 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	7d1b      	ldrb	r3, [r3, #20]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <f_write+0x5a>
 80063e6:	2307      	movs	r3, #7
 80063e8:	e143      	b.n	8006672 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	441a      	add	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	f080 812d 	bcs.w	8006656 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	43db      	mvns	r3, r3
 8006402:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006404:	e127      	b.n	8006656 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 80e3 	bne.w	80065da <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	0a5b      	lsrs	r3, r3, #9
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	8952      	ldrh	r2, [r2, #10]
 800641e:	3a01      	subs	r2, #1
 8006420:	4013      	ands	r3, r2
 8006422:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d143      	bne.n	80064b2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10c      	bne.n	800644c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	2b00      	cmp	r3, #0
 800643c:	d11a      	bne.n	8006474 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2100      	movs	r1, #0
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fe64 	bl	8005110 <create_chain>
 8006448:	62b8      	str	r0, [r7, #40]	; 0x28
 800644a:	e013      	b.n	8006474 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	4619      	mov	r1, r3
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7fe fef0 	bl	8005240 <clmt_clust>
 8006460:	62b8      	str	r0, [r7, #40]	; 0x28
 8006462:	e007      	b.n	8006474 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	4619      	mov	r1, r3
 800646c:	4610      	mov	r0, r2
 800646e:	f7fe fe4f 	bl	8005110 <create_chain>
 8006472:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80f2 	beq.w	8006660 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	2b01      	cmp	r3, #1
 8006480:	d104      	bne.n	800648c <f_write+0xfc>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2202      	movs	r2, #2
 8006486:	755a      	strb	r2, [r3, #21]
 8006488:	2302      	movs	r3, #2
 800648a:	e0f2      	b.n	8006672 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d104      	bne.n	800649e <f_write+0x10e>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2201      	movs	r2, #1
 8006498:	755a      	strb	r2, [r3, #21]
 800649a:	2301      	movs	r3, #1
 800649c:	e0e9      	b.n	8006672 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <f_write+0x122>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	7d1b      	ldrb	r3, [r3, #20]
 80064b6:	b25b      	sxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	da18      	bge.n	80064ee <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	7858      	ldrb	r0, [r3, #1]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1a      	ldr	r2, [r3, #32]
 80064ca:	2301      	movs	r3, #1
 80064cc:	f7fe f880 	bl	80045d0 <disk_write>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <f_write+0x150>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	755a      	strb	r2, [r3, #21]
 80064dc:	2301      	movs	r3, #1
 80064de:	e0c8      	b.n	8006672 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	7d1b      	ldrb	r3, [r3, #20]
 80064e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f7fe fbf4 	bl	8004ce4 <clust2sect>
 80064fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d104      	bne.n	800650e <f_write+0x17e>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2202      	movs	r2, #2
 8006508:	755a      	strb	r2, [r3, #21]
 800650a:	2302      	movs	r3, #2
 800650c:	e0b1      	b.n	8006672 <f_write+0x2e2>
			sect += csect;
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	4413      	add	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	0a5b      	lsrs	r3, r3, #9
 800651a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d03c      	beq.n	800659c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	4413      	add	r3, r2
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	8952      	ldrh	r2, [r2, #10]
 800652c:	4293      	cmp	r3, r2
 800652e:	d905      	bls.n	800653c <f_write+0x1ac>
					cc = fs->csize - csect;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	895b      	ldrh	r3, [r3, #10]
 8006534:	461a      	mov	r2, r3
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	7858      	ldrb	r0, [r3, #1]
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	69f9      	ldr	r1, [r7, #28]
 8006546:	f7fe f843 	bl	80045d0 <disk_write>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <f_write+0x1ca>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	755a      	strb	r2, [r3, #21]
 8006556:	2301      	movs	r3, #1
 8006558:	e08b      	b.n	8006672 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1a      	ldr	r2, [r3, #32]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	6a3a      	ldr	r2, [r7, #32]
 8006564:	429a      	cmp	r2, r3
 8006566:	d915      	bls.n	8006594 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1a      	ldr	r2, [r3, #32]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	025b      	lsls	r3, r3, #9
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	4413      	add	r3, r2
 800657c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006580:	4619      	mov	r1, r3
 8006582:	f7fe f8e5 	bl	8004750 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	7d1b      	ldrb	r3, [r3, #20]
 800658a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800658e:	b2da      	uxtb	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	025b      	lsls	r3, r3, #9
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800659a:	e03f      	b.n	800661c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d016      	beq.n	80065d4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d210      	bcs.n	80065d4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	7858      	ldrb	r0, [r3, #1]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065bc:	2301      	movs	r3, #1
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	f7fd ffe6 	bl	8004590 <disk_read>
 80065c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	755a      	strb	r2, [r3, #21]
 80065d0:	2301      	movs	r3, #1
 80065d2:	e04e      	b.n	8006672 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80065e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d901      	bls.n	80065f4 <f_write+0x264>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006602:	4413      	add	r3, r2
 8006604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006606:	69f9      	ldr	r1, [r7, #28]
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe f8a1 	bl	8004750 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	7d1b      	ldrb	r3, [r3, #20]
 8006612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006616:	b2da      	uxtb	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	4413      	add	r3, r2
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	699a      	ldr	r2, [r3, #24]
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	441a      	add	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	619a      	str	r2, [r3, #24]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	429a      	cmp	r2, r3
 800663a:	bf38      	it	cc
 800663c:	461a      	movcc	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	441a      	add	r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f47f aed4 	bne.w	8006406 <f_write+0x76>
 800665e:	e000      	b.n	8006662 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006660:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	7d1b      	ldrb	r3, [r3, #20]
 8006666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800666a:	b2da      	uxtb	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3730      	adds	r7, #48	; 0x30
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f107 0208 	add.w	r2, r7, #8
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fc46 	bl	8005f1c <validate>
 8006690:	4603      	mov	r3, r0
 8006692:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d168      	bne.n	800676c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	7d1b      	ldrb	r3, [r3, #20]
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d062      	beq.n	800676c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	7d1b      	ldrb	r3, [r3, #20]
 80066aa:	b25b      	sxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	da15      	bge.n	80066dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	7858      	ldrb	r0, [r3, #1]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1a      	ldr	r2, [r3, #32]
 80066be:	2301      	movs	r3, #1
 80066c0:	f7fd ff86 	bl	80045d0 <disk_write>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <f_sync+0x54>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e04f      	b.n	800676e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	7d1b      	ldrb	r3, [r3, #20]
 80066d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80066dc:	f7fd f9da 	bl	8003a94 <get_fattime>
 80066e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f7fe fa5e 	bl	8004bac <move_window>
 80066f0:	4603      	mov	r3, r0
 80066f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d138      	bne.n	800676c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	330b      	adds	r3, #11
 8006704:	781a      	ldrb	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	330b      	adds	r3, #11
 800670a:	f042 0220 	orr.w	r2, r2, #32
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	461a      	mov	r2, r3
 800671c:	68f9      	ldr	r1, [r7, #12]
 800671e:	f7fe ff69 	bl	80055f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f103 021c 	add.w	r2, r3, #28
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f7fd ffe2 	bl	80046f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3316      	adds	r3, #22
 8006738:	6939      	ldr	r1, [r7, #16]
 800673a:	4618      	mov	r0, r3
 800673c:	f7fd ffdc 	bl	80046f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3312      	adds	r3, #18
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f7fd ffbb 	bl	80046c2 <st_word>
					fs->wflag = 1;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2201      	movs	r2, #1
 8006750:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fa57 	bl	8004c08 <sync_fs>
 800675a:	4603      	mov	r3, r0
 800675c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7d1b      	ldrb	r3, [r3, #20]
 8006762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006766:	b2da      	uxtb	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800676c:	7dfb      	ldrb	r3, [r7, #23]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff ff7b 	bl	800667a <f_sync>
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d118      	bne.n	80067c0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f107 0208 	add.w	r2, r7, #8
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fbc0 	bl	8005f1c <validate>
 800679c:	4603      	mov	r3, r0
 800679e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe f95a 	bl	8004a64 <dec_lock>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80067e2:	4b1f      	ldr	r3, [pc, #124]	; (8006860 <FATFS_LinkDriverEx+0x94>)
 80067e4:	7a5b      	ldrb	r3, [r3, #9]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d131      	bne.n	8006850 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80067ec:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <FATFS_LinkDriverEx+0x94>)
 80067ee:	7a5b      	ldrb	r3, [r3, #9]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <FATFS_LinkDriverEx+0x94>)
 80067f6:	2100      	movs	r1, #0
 80067f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80067fa:	4b19      	ldr	r3, [pc, #100]	; (8006860 <FATFS_LinkDriverEx+0x94>)
 80067fc:	7a5b      	ldrb	r3, [r3, #9]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	4a17      	ldr	r2, [pc, #92]	; (8006860 <FATFS_LinkDriverEx+0x94>)
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800680a:	4b15      	ldr	r3, [pc, #84]	; (8006860 <FATFS_LinkDriverEx+0x94>)
 800680c:	7a5b      	ldrb	r3, [r3, #9]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	4b13      	ldr	r3, [pc, #76]	; (8006860 <FATFS_LinkDriverEx+0x94>)
 8006814:	4413      	add	r3, r2
 8006816:	79fa      	ldrb	r2, [r7, #7]
 8006818:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800681a:	4b11      	ldr	r3, [pc, #68]	; (8006860 <FATFS_LinkDriverEx+0x94>)
 800681c:	7a5b      	ldrb	r3, [r3, #9]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	b2d1      	uxtb	r1, r2
 8006824:	4a0e      	ldr	r2, [pc, #56]	; (8006860 <FATFS_LinkDriverEx+0x94>)
 8006826:	7251      	strb	r1, [r2, #9]
 8006828:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800682a:	7dbb      	ldrb	r3, [r7, #22]
 800682c:	3330      	adds	r3, #48	; 0x30
 800682e:	b2da      	uxtb	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	3301      	adds	r3, #1
 8006838:	223a      	movs	r2, #58	; 0x3a
 800683a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	3302      	adds	r3, #2
 8006840:	222f      	movs	r2, #47	; 0x2f
 8006842:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	3303      	adds	r3, #3
 8006848:	2200      	movs	r2, #0
 800684a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006850:	7dfb      	ldrb	r3, [r7, #23]
}
 8006852:	4618      	mov	r0, r3
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	200001b8 	.word	0x200001b8

08006864 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800686e:	2200      	movs	r2, #0
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff ffaa 	bl	80067cc <FATFS_LinkDriverEx>
 8006878:	4603      	mov	r3, r0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <siprintf>:
 8006884:	b40e      	push	{r1, r2, r3}
 8006886:	b500      	push	{lr}
 8006888:	b09c      	sub	sp, #112	; 0x70
 800688a:	ab1d      	add	r3, sp, #116	; 0x74
 800688c:	9002      	str	r0, [sp, #8]
 800688e:	9006      	str	r0, [sp, #24]
 8006890:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006894:	4809      	ldr	r0, [pc, #36]	; (80068bc <siprintf+0x38>)
 8006896:	9107      	str	r1, [sp, #28]
 8006898:	9104      	str	r1, [sp, #16]
 800689a:	4909      	ldr	r1, [pc, #36]	; (80068c0 <siprintf+0x3c>)
 800689c:	f853 2b04 	ldr.w	r2, [r3], #4
 80068a0:	9105      	str	r1, [sp, #20]
 80068a2:	6800      	ldr	r0, [r0, #0]
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	a902      	add	r1, sp, #8
 80068a8:	f000 f992 	bl	8006bd0 <_svfiprintf_r>
 80068ac:	9b02      	ldr	r3, [sp, #8]
 80068ae:	2200      	movs	r2, #0
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	b01c      	add	sp, #112	; 0x70
 80068b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068b8:	b003      	add	sp, #12
 80068ba:	4770      	bx	lr
 80068bc:	20000070 	.word	0x20000070
 80068c0:	ffff0208 	.word	0xffff0208

080068c4 <memset>:
 80068c4:	4402      	add	r2, r0
 80068c6:	4603      	mov	r3, r0
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d100      	bne.n	80068ce <memset+0xa>
 80068cc:	4770      	bx	lr
 80068ce:	f803 1b01 	strb.w	r1, [r3], #1
 80068d2:	e7f9      	b.n	80068c8 <memset+0x4>

080068d4 <__errno>:
 80068d4:	4b01      	ldr	r3, [pc, #4]	; (80068dc <__errno+0x8>)
 80068d6:	6818      	ldr	r0, [r3, #0]
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20000070 	.word	0x20000070

080068e0 <__libc_init_array>:
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	4d0d      	ldr	r5, [pc, #52]	; (8006918 <__libc_init_array+0x38>)
 80068e4:	4c0d      	ldr	r4, [pc, #52]	; (800691c <__libc_init_array+0x3c>)
 80068e6:	1b64      	subs	r4, r4, r5
 80068e8:	10a4      	asrs	r4, r4, #2
 80068ea:	2600      	movs	r6, #0
 80068ec:	42a6      	cmp	r6, r4
 80068ee:	d109      	bne.n	8006904 <__libc_init_array+0x24>
 80068f0:	4d0b      	ldr	r5, [pc, #44]	; (8006920 <__libc_init_array+0x40>)
 80068f2:	4c0c      	ldr	r4, [pc, #48]	; (8006924 <__libc_init_array+0x44>)
 80068f4:	f000 fc6a 	bl	80071cc <_init>
 80068f8:	1b64      	subs	r4, r4, r5
 80068fa:	10a4      	asrs	r4, r4, #2
 80068fc:	2600      	movs	r6, #0
 80068fe:	42a6      	cmp	r6, r4
 8006900:	d105      	bne.n	800690e <__libc_init_array+0x2e>
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	f855 3b04 	ldr.w	r3, [r5], #4
 8006908:	4798      	blx	r3
 800690a:	3601      	adds	r6, #1
 800690c:	e7ee      	b.n	80068ec <__libc_init_array+0xc>
 800690e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006912:	4798      	blx	r3
 8006914:	3601      	adds	r6, #1
 8006916:	e7f2      	b.n	80068fe <__libc_init_array+0x1e>
 8006918:	08007418 	.word	0x08007418
 800691c:	08007418 	.word	0x08007418
 8006920:	08007418 	.word	0x08007418
 8006924:	0800741c 	.word	0x0800741c

08006928 <__retarget_lock_acquire_recursive>:
 8006928:	4770      	bx	lr

0800692a <__retarget_lock_release_recursive>:
 800692a:	4770      	bx	lr

0800692c <_free_r>:
 800692c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800692e:	2900      	cmp	r1, #0
 8006930:	d044      	beq.n	80069bc <_free_r+0x90>
 8006932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006936:	9001      	str	r0, [sp, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f1a1 0404 	sub.w	r4, r1, #4
 800693e:	bfb8      	it	lt
 8006940:	18e4      	addlt	r4, r4, r3
 8006942:	f000 f8df 	bl	8006b04 <__malloc_lock>
 8006946:	4a1e      	ldr	r2, [pc, #120]	; (80069c0 <_free_r+0x94>)
 8006948:	9801      	ldr	r0, [sp, #4]
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	b933      	cbnz	r3, 800695c <_free_r+0x30>
 800694e:	6063      	str	r3, [r4, #4]
 8006950:	6014      	str	r4, [r2, #0]
 8006952:	b003      	add	sp, #12
 8006954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006958:	f000 b8da 	b.w	8006b10 <__malloc_unlock>
 800695c:	42a3      	cmp	r3, r4
 800695e:	d908      	bls.n	8006972 <_free_r+0x46>
 8006960:	6825      	ldr	r5, [r4, #0]
 8006962:	1961      	adds	r1, r4, r5
 8006964:	428b      	cmp	r3, r1
 8006966:	bf01      	itttt	eq
 8006968:	6819      	ldreq	r1, [r3, #0]
 800696a:	685b      	ldreq	r3, [r3, #4]
 800696c:	1949      	addeq	r1, r1, r5
 800696e:	6021      	streq	r1, [r4, #0]
 8006970:	e7ed      	b.n	800694e <_free_r+0x22>
 8006972:	461a      	mov	r2, r3
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	b10b      	cbz	r3, 800697c <_free_r+0x50>
 8006978:	42a3      	cmp	r3, r4
 800697a:	d9fa      	bls.n	8006972 <_free_r+0x46>
 800697c:	6811      	ldr	r1, [r2, #0]
 800697e:	1855      	adds	r5, r2, r1
 8006980:	42a5      	cmp	r5, r4
 8006982:	d10b      	bne.n	800699c <_free_r+0x70>
 8006984:	6824      	ldr	r4, [r4, #0]
 8006986:	4421      	add	r1, r4
 8006988:	1854      	adds	r4, r2, r1
 800698a:	42a3      	cmp	r3, r4
 800698c:	6011      	str	r1, [r2, #0]
 800698e:	d1e0      	bne.n	8006952 <_free_r+0x26>
 8006990:	681c      	ldr	r4, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	6053      	str	r3, [r2, #4]
 8006996:	440c      	add	r4, r1
 8006998:	6014      	str	r4, [r2, #0]
 800699a:	e7da      	b.n	8006952 <_free_r+0x26>
 800699c:	d902      	bls.n	80069a4 <_free_r+0x78>
 800699e:	230c      	movs	r3, #12
 80069a0:	6003      	str	r3, [r0, #0]
 80069a2:	e7d6      	b.n	8006952 <_free_r+0x26>
 80069a4:	6825      	ldr	r5, [r4, #0]
 80069a6:	1961      	adds	r1, r4, r5
 80069a8:	428b      	cmp	r3, r1
 80069aa:	bf04      	itt	eq
 80069ac:	6819      	ldreq	r1, [r3, #0]
 80069ae:	685b      	ldreq	r3, [r3, #4]
 80069b0:	6063      	str	r3, [r4, #4]
 80069b2:	bf04      	itt	eq
 80069b4:	1949      	addeq	r1, r1, r5
 80069b6:	6021      	streq	r1, [r4, #0]
 80069b8:	6054      	str	r4, [r2, #4]
 80069ba:	e7ca      	b.n	8006952 <_free_r+0x26>
 80069bc:	b003      	add	sp, #12
 80069be:	bd30      	pop	{r4, r5, pc}
 80069c0:	20000304 	.word	0x20000304

080069c4 <sbrk_aligned>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	4e0e      	ldr	r6, [pc, #56]	; (8006a00 <sbrk_aligned+0x3c>)
 80069c8:	460c      	mov	r4, r1
 80069ca:	6831      	ldr	r1, [r6, #0]
 80069cc:	4605      	mov	r5, r0
 80069ce:	b911      	cbnz	r1, 80069d6 <sbrk_aligned+0x12>
 80069d0:	f000 fba6 	bl	8007120 <_sbrk_r>
 80069d4:	6030      	str	r0, [r6, #0]
 80069d6:	4621      	mov	r1, r4
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 fba1 	bl	8007120 <_sbrk_r>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	d00a      	beq.n	80069f8 <sbrk_aligned+0x34>
 80069e2:	1cc4      	adds	r4, r0, #3
 80069e4:	f024 0403 	bic.w	r4, r4, #3
 80069e8:	42a0      	cmp	r0, r4
 80069ea:	d007      	beq.n	80069fc <sbrk_aligned+0x38>
 80069ec:	1a21      	subs	r1, r4, r0
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 fb96 	bl	8007120 <_sbrk_r>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d101      	bne.n	80069fc <sbrk_aligned+0x38>
 80069f8:	f04f 34ff 	mov.w	r4, #4294967295
 80069fc:	4620      	mov	r0, r4
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	20000308 	.word	0x20000308

08006a04 <_malloc_r>:
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	1ccd      	adds	r5, r1, #3
 8006a0a:	f025 0503 	bic.w	r5, r5, #3
 8006a0e:	3508      	adds	r5, #8
 8006a10:	2d0c      	cmp	r5, #12
 8006a12:	bf38      	it	cc
 8006a14:	250c      	movcc	r5, #12
 8006a16:	2d00      	cmp	r5, #0
 8006a18:	4607      	mov	r7, r0
 8006a1a:	db01      	blt.n	8006a20 <_malloc_r+0x1c>
 8006a1c:	42a9      	cmp	r1, r5
 8006a1e:	d905      	bls.n	8006a2c <_malloc_r+0x28>
 8006a20:	230c      	movs	r3, #12
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	2600      	movs	r6, #0
 8006a26:	4630      	mov	r0, r6
 8006a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b00 <_malloc_r+0xfc>
 8006a30:	f000 f868 	bl	8006b04 <__malloc_lock>
 8006a34:	f8d8 3000 	ldr.w	r3, [r8]
 8006a38:	461c      	mov	r4, r3
 8006a3a:	bb5c      	cbnz	r4, 8006a94 <_malloc_r+0x90>
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4638      	mov	r0, r7
 8006a40:	f7ff ffc0 	bl	80069c4 <sbrk_aligned>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	4604      	mov	r4, r0
 8006a48:	d155      	bne.n	8006af6 <_malloc_r+0xf2>
 8006a4a:	f8d8 4000 	ldr.w	r4, [r8]
 8006a4e:	4626      	mov	r6, r4
 8006a50:	2e00      	cmp	r6, #0
 8006a52:	d145      	bne.n	8006ae0 <_malloc_r+0xdc>
 8006a54:	2c00      	cmp	r4, #0
 8006a56:	d048      	beq.n	8006aea <_malloc_r+0xe6>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	eb04 0903 	add.w	r9, r4, r3
 8006a62:	f000 fb5d 	bl	8007120 <_sbrk_r>
 8006a66:	4581      	cmp	r9, r0
 8006a68:	d13f      	bne.n	8006aea <_malloc_r+0xe6>
 8006a6a:	6821      	ldr	r1, [r4, #0]
 8006a6c:	1a6d      	subs	r5, r5, r1
 8006a6e:	4629      	mov	r1, r5
 8006a70:	4638      	mov	r0, r7
 8006a72:	f7ff ffa7 	bl	80069c4 <sbrk_aligned>
 8006a76:	3001      	adds	r0, #1
 8006a78:	d037      	beq.n	8006aea <_malloc_r+0xe6>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	442b      	add	r3, r5
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	f8d8 3000 	ldr.w	r3, [r8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d038      	beq.n	8006afa <_malloc_r+0xf6>
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	42a2      	cmp	r2, r4
 8006a8c:	d12b      	bne.n	8006ae6 <_malloc_r+0xe2>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	e00f      	b.n	8006ab4 <_malloc_r+0xb0>
 8006a94:	6822      	ldr	r2, [r4, #0]
 8006a96:	1b52      	subs	r2, r2, r5
 8006a98:	d41f      	bmi.n	8006ada <_malloc_r+0xd6>
 8006a9a:	2a0b      	cmp	r2, #11
 8006a9c:	d917      	bls.n	8006ace <_malloc_r+0xca>
 8006a9e:	1961      	adds	r1, r4, r5
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	6025      	str	r5, [r4, #0]
 8006aa4:	bf18      	it	ne
 8006aa6:	6059      	strne	r1, [r3, #4]
 8006aa8:	6863      	ldr	r3, [r4, #4]
 8006aaa:	bf08      	it	eq
 8006aac:	f8c8 1000 	streq.w	r1, [r8]
 8006ab0:	5162      	str	r2, [r4, r5]
 8006ab2:	604b      	str	r3, [r1, #4]
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f104 060b 	add.w	r6, r4, #11
 8006aba:	f000 f829 	bl	8006b10 <__malloc_unlock>
 8006abe:	f026 0607 	bic.w	r6, r6, #7
 8006ac2:	1d23      	adds	r3, r4, #4
 8006ac4:	1af2      	subs	r2, r6, r3
 8006ac6:	d0ae      	beq.n	8006a26 <_malloc_r+0x22>
 8006ac8:	1b9b      	subs	r3, r3, r6
 8006aca:	50a3      	str	r3, [r4, r2]
 8006acc:	e7ab      	b.n	8006a26 <_malloc_r+0x22>
 8006ace:	42a3      	cmp	r3, r4
 8006ad0:	6862      	ldr	r2, [r4, #4]
 8006ad2:	d1dd      	bne.n	8006a90 <_malloc_r+0x8c>
 8006ad4:	f8c8 2000 	str.w	r2, [r8]
 8006ad8:	e7ec      	b.n	8006ab4 <_malloc_r+0xb0>
 8006ada:	4623      	mov	r3, r4
 8006adc:	6864      	ldr	r4, [r4, #4]
 8006ade:	e7ac      	b.n	8006a3a <_malloc_r+0x36>
 8006ae0:	4634      	mov	r4, r6
 8006ae2:	6876      	ldr	r6, [r6, #4]
 8006ae4:	e7b4      	b.n	8006a50 <_malloc_r+0x4c>
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	e7cc      	b.n	8006a84 <_malloc_r+0x80>
 8006aea:	230c      	movs	r3, #12
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	4638      	mov	r0, r7
 8006af0:	f000 f80e 	bl	8006b10 <__malloc_unlock>
 8006af4:	e797      	b.n	8006a26 <_malloc_r+0x22>
 8006af6:	6025      	str	r5, [r4, #0]
 8006af8:	e7dc      	b.n	8006ab4 <_malloc_r+0xb0>
 8006afa:	605b      	str	r3, [r3, #4]
 8006afc:	deff      	udf	#255	; 0xff
 8006afe:	bf00      	nop
 8006b00:	20000304 	.word	0x20000304

08006b04 <__malloc_lock>:
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__malloc_lock+0x8>)
 8006b06:	f7ff bf0f 	b.w	8006928 <__retarget_lock_acquire_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	20000300 	.word	0x20000300

08006b10 <__malloc_unlock>:
 8006b10:	4801      	ldr	r0, [pc, #4]	; (8006b18 <__malloc_unlock+0x8>)
 8006b12:	f7ff bf0a 	b.w	800692a <__retarget_lock_release_recursive>
 8006b16:	bf00      	nop
 8006b18:	20000300 	.word	0x20000300

08006b1c <__ssputs_r>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	688e      	ldr	r6, [r1, #8]
 8006b22:	461f      	mov	r7, r3
 8006b24:	42be      	cmp	r6, r7
 8006b26:	680b      	ldr	r3, [r1, #0]
 8006b28:	4682      	mov	sl, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	4690      	mov	r8, r2
 8006b2e:	d82c      	bhi.n	8006b8a <__ssputs_r+0x6e>
 8006b30:	898a      	ldrh	r2, [r1, #12]
 8006b32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b36:	d026      	beq.n	8006b86 <__ssputs_r+0x6a>
 8006b38:	6965      	ldr	r5, [r4, #20]
 8006b3a:	6909      	ldr	r1, [r1, #16]
 8006b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b40:	eba3 0901 	sub.w	r9, r3, r1
 8006b44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b48:	1c7b      	adds	r3, r7, #1
 8006b4a:	444b      	add	r3, r9
 8006b4c:	106d      	asrs	r5, r5, #1
 8006b4e:	429d      	cmp	r5, r3
 8006b50:	bf38      	it	cc
 8006b52:	461d      	movcc	r5, r3
 8006b54:	0553      	lsls	r3, r2, #21
 8006b56:	d527      	bpl.n	8006ba8 <__ssputs_r+0x8c>
 8006b58:	4629      	mov	r1, r5
 8006b5a:	f7ff ff53 	bl	8006a04 <_malloc_r>
 8006b5e:	4606      	mov	r6, r0
 8006b60:	b360      	cbz	r0, 8006bbc <__ssputs_r+0xa0>
 8006b62:	6921      	ldr	r1, [r4, #16]
 8006b64:	464a      	mov	r2, r9
 8006b66:	f000 faeb 	bl	8007140 <memcpy>
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	6126      	str	r6, [r4, #16]
 8006b78:	6165      	str	r5, [r4, #20]
 8006b7a:	444e      	add	r6, r9
 8006b7c:	eba5 0509 	sub.w	r5, r5, r9
 8006b80:	6026      	str	r6, [r4, #0]
 8006b82:	60a5      	str	r5, [r4, #8]
 8006b84:	463e      	mov	r6, r7
 8006b86:	42be      	cmp	r6, r7
 8006b88:	d900      	bls.n	8006b8c <__ssputs_r+0x70>
 8006b8a:	463e      	mov	r6, r7
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	4632      	mov	r2, r6
 8006b90:	4641      	mov	r1, r8
 8006b92:	f000 faab 	bl	80070ec <memmove>
 8006b96:	68a3      	ldr	r3, [r4, #8]
 8006b98:	1b9b      	subs	r3, r3, r6
 8006b9a:	60a3      	str	r3, [r4, #8]
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	4433      	add	r3, r6
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba8:	462a      	mov	r2, r5
 8006baa:	f000 fad7 	bl	800715c <_realloc_r>
 8006bae:	4606      	mov	r6, r0
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d1e0      	bne.n	8006b76 <__ssputs_r+0x5a>
 8006bb4:	6921      	ldr	r1, [r4, #16]
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	f7ff feb8 	bl	800692c <_free_r>
 8006bbc:	230c      	movs	r3, #12
 8006bbe:	f8ca 3000 	str.w	r3, [sl]
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	f04f 30ff 	mov.w	r0, #4294967295
 8006bce:	e7e9      	b.n	8006ba4 <__ssputs_r+0x88>

08006bd0 <_svfiprintf_r>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	4698      	mov	r8, r3
 8006bd6:	898b      	ldrh	r3, [r1, #12]
 8006bd8:	061b      	lsls	r3, r3, #24
 8006bda:	b09d      	sub	sp, #116	; 0x74
 8006bdc:	4607      	mov	r7, r0
 8006bde:	460d      	mov	r5, r1
 8006be0:	4614      	mov	r4, r2
 8006be2:	d50e      	bpl.n	8006c02 <_svfiprintf_r+0x32>
 8006be4:	690b      	ldr	r3, [r1, #16]
 8006be6:	b963      	cbnz	r3, 8006c02 <_svfiprintf_r+0x32>
 8006be8:	2140      	movs	r1, #64	; 0x40
 8006bea:	f7ff ff0b 	bl	8006a04 <_malloc_r>
 8006bee:	6028      	str	r0, [r5, #0]
 8006bf0:	6128      	str	r0, [r5, #16]
 8006bf2:	b920      	cbnz	r0, 8006bfe <_svfiprintf_r+0x2e>
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	e0d0      	b.n	8006da0 <_svfiprintf_r+0x1d0>
 8006bfe:	2340      	movs	r3, #64	; 0x40
 8006c00:	616b      	str	r3, [r5, #20]
 8006c02:	2300      	movs	r3, #0
 8006c04:	9309      	str	r3, [sp, #36]	; 0x24
 8006c06:	2320      	movs	r3, #32
 8006c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c10:	2330      	movs	r3, #48	; 0x30
 8006c12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006db8 <_svfiprintf_r+0x1e8>
 8006c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c1a:	f04f 0901 	mov.w	r9, #1
 8006c1e:	4623      	mov	r3, r4
 8006c20:	469a      	mov	sl, r3
 8006c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c26:	b10a      	cbz	r2, 8006c2c <_svfiprintf_r+0x5c>
 8006c28:	2a25      	cmp	r2, #37	; 0x25
 8006c2a:	d1f9      	bne.n	8006c20 <_svfiprintf_r+0x50>
 8006c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c30:	d00b      	beq.n	8006c4a <_svfiprintf_r+0x7a>
 8006c32:	465b      	mov	r3, fp
 8006c34:	4622      	mov	r2, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff ff6f 	bl	8006b1c <__ssputs_r>
 8006c3e:	3001      	adds	r0, #1
 8006c40:	f000 80a9 	beq.w	8006d96 <_svfiprintf_r+0x1c6>
 8006c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c46:	445a      	add	r2, fp
 8006c48:	9209      	str	r2, [sp, #36]	; 0x24
 8006c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 80a1 	beq.w	8006d96 <_svfiprintf_r+0x1c6>
 8006c54:	2300      	movs	r3, #0
 8006c56:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c5e:	f10a 0a01 	add.w	sl, sl, #1
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	9307      	str	r3, [sp, #28]
 8006c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6c:	4654      	mov	r4, sl
 8006c6e:	2205      	movs	r2, #5
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	4850      	ldr	r0, [pc, #320]	; (8006db8 <_svfiprintf_r+0x1e8>)
 8006c76:	f7f9 fabb 	bl	80001f0 <memchr>
 8006c7a:	9a04      	ldr	r2, [sp, #16]
 8006c7c:	b9d8      	cbnz	r0, 8006cb6 <_svfiprintf_r+0xe6>
 8006c7e:	06d0      	lsls	r0, r2, #27
 8006c80:	bf44      	itt	mi
 8006c82:	2320      	movmi	r3, #32
 8006c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c88:	0711      	lsls	r1, r2, #28
 8006c8a:	bf44      	itt	mi
 8006c8c:	232b      	movmi	r3, #43	; 0x2b
 8006c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c92:	f89a 3000 	ldrb.w	r3, [sl]
 8006c96:	2b2a      	cmp	r3, #42	; 0x2a
 8006c98:	d015      	beq.n	8006cc6 <_svfiprintf_r+0xf6>
 8006c9a:	9a07      	ldr	r2, [sp, #28]
 8006c9c:	4654      	mov	r4, sl
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f04f 0c0a 	mov.w	ip, #10
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006caa:	3b30      	subs	r3, #48	; 0x30
 8006cac:	2b09      	cmp	r3, #9
 8006cae:	d94d      	bls.n	8006d4c <_svfiprintf_r+0x17c>
 8006cb0:	b1b0      	cbz	r0, 8006ce0 <_svfiprintf_r+0x110>
 8006cb2:	9207      	str	r2, [sp, #28]
 8006cb4:	e014      	b.n	8006ce0 <_svfiprintf_r+0x110>
 8006cb6:	eba0 0308 	sub.w	r3, r0, r8
 8006cba:	fa09 f303 	lsl.w	r3, r9, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	46a2      	mov	sl, r4
 8006cc4:	e7d2      	b.n	8006c6c <_svfiprintf_r+0x9c>
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	1d19      	adds	r1, r3, #4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	9103      	str	r1, [sp, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bfbb      	ittet	lt
 8006cd2:	425b      	neglt	r3, r3
 8006cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8006cd8:	9307      	strge	r3, [sp, #28]
 8006cda:	9307      	strlt	r3, [sp, #28]
 8006cdc:	bfb8      	it	lt
 8006cde:	9204      	strlt	r2, [sp, #16]
 8006ce0:	7823      	ldrb	r3, [r4, #0]
 8006ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce4:	d10c      	bne.n	8006d00 <_svfiprintf_r+0x130>
 8006ce6:	7863      	ldrb	r3, [r4, #1]
 8006ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cea:	d134      	bne.n	8006d56 <_svfiprintf_r+0x186>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	1d1a      	adds	r2, r3, #4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	9203      	str	r2, [sp, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bfb8      	it	lt
 8006cf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cfc:	3402      	adds	r4, #2
 8006cfe:	9305      	str	r3, [sp, #20]
 8006d00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006dc8 <_svfiprintf_r+0x1f8>
 8006d04:	7821      	ldrb	r1, [r4, #0]
 8006d06:	2203      	movs	r2, #3
 8006d08:	4650      	mov	r0, sl
 8006d0a:	f7f9 fa71 	bl	80001f0 <memchr>
 8006d0e:	b138      	cbz	r0, 8006d20 <_svfiprintf_r+0x150>
 8006d10:	9b04      	ldr	r3, [sp, #16]
 8006d12:	eba0 000a 	sub.w	r0, r0, sl
 8006d16:	2240      	movs	r2, #64	; 0x40
 8006d18:	4082      	lsls	r2, r0
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	3401      	adds	r4, #1
 8006d1e:	9304      	str	r3, [sp, #16]
 8006d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d24:	4825      	ldr	r0, [pc, #148]	; (8006dbc <_svfiprintf_r+0x1ec>)
 8006d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d2a:	2206      	movs	r2, #6
 8006d2c:	f7f9 fa60 	bl	80001f0 <memchr>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d038      	beq.n	8006da6 <_svfiprintf_r+0x1d6>
 8006d34:	4b22      	ldr	r3, [pc, #136]	; (8006dc0 <_svfiprintf_r+0x1f0>)
 8006d36:	bb1b      	cbnz	r3, 8006d80 <_svfiprintf_r+0x1b0>
 8006d38:	9b03      	ldr	r3, [sp, #12]
 8006d3a:	3307      	adds	r3, #7
 8006d3c:	f023 0307 	bic.w	r3, r3, #7
 8006d40:	3308      	adds	r3, #8
 8006d42:	9303      	str	r3, [sp, #12]
 8006d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d46:	4433      	add	r3, r6
 8006d48:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4a:	e768      	b.n	8006c1e <_svfiprintf_r+0x4e>
 8006d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d50:	460c      	mov	r4, r1
 8006d52:	2001      	movs	r0, #1
 8006d54:	e7a6      	b.n	8006ca4 <_svfiprintf_r+0xd4>
 8006d56:	2300      	movs	r3, #0
 8006d58:	3401      	adds	r4, #1
 8006d5a:	9305      	str	r3, [sp, #20]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	f04f 0c0a 	mov.w	ip, #10
 8006d62:	4620      	mov	r0, r4
 8006d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d68:	3a30      	subs	r2, #48	; 0x30
 8006d6a:	2a09      	cmp	r2, #9
 8006d6c:	d903      	bls.n	8006d76 <_svfiprintf_r+0x1a6>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0c6      	beq.n	8006d00 <_svfiprintf_r+0x130>
 8006d72:	9105      	str	r1, [sp, #20]
 8006d74:	e7c4      	b.n	8006d00 <_svfiprintf_r+0x130>
 8006d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e7f0      	b.n	8006d62 <_svfiprintf_r+0x192>
 8006d80:	ab03      	add	r3, sp, #12
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	462a      	mov	r2, r5
 8006d86:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <_svfiprintf_r+0x1f4>)
 8006d88:	a904      	add	r1, sp, #16
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	f3af 8000 	nop.w
 8006d90:	1c42      	adds	r2, r0, #1
 8006d92:	4606      	mov	r6, r0
 8006d94:	d1d6      	bne.n	8006d44 <_svfiprintf_r+0x174>
 8006d96:	89ab      	ldrh	r3, [r5, #12]
 8006d98:	065b      	lsls	r3, r3, #25
 8006d9a:	f53f af2d 	bmi.w	8006bf8 <_svfiprintf_r+0x28>
 8006d9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006da0:	b01d      	add	sp, #116	; 0x74
 8006da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da6:	ab03      	add	r3, sp, #12
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	462a      	mov	r2, r5
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <_svfiprintf_r+0x1f4>)
 8006dae:	a904      	add	r1, sp, #16
 8006db0:	4638      	mov	r0, r7
 8006db2:	f000 f879 	bl	8006ea8 <_printf_i>
 8006db6:	e7eb      	b.n	8006d90 <_svfiprintf_r+0x1c0>
 8006db8:	080073dc 	.word	0x080073dc
 8006dbc:	080073e6 	.word	0x080073e6
 8006dc0:	00000000 	.word	0x00000000
 8006dc4:	08006b1d 	.word	0x08006b1d
 8006dc8:	080073e2 	.word	0x080073e2

08006dcc <_printf_common>:
 8006dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd0:	4616      	mov	r6, r2
 8006dd2:	4699      	mov	r9, r3
 8006dd4:	688a      	ldr	r2, [r1, #8]
 8006dd6:	690b      	ldr	r3, [r1, #16]
 8006dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	bfb8      	it	lt
 8006de0:	4613      	movlt	r3, r2
 8006de2:	6033      	str	r3, [r6, #0]
 8006de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006de8:	4607      	mov	r7, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	b10a      	cbz	r2, 8006df2 <_printf_common+0x26>
 8006dee:	3301      	adds	r3, #1
 8006df0:	6033      	str	r3, [r6, #0]
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	0699      	lsls	r1, r3, #26
 8006df6:	bf42      	ittt	mi
 8006df8:	6833      	ldrmi	r3, [r6, #0]
 8006dfa:	3302      	addmi	r3, #2
 8006dfc:	6033      	strmi	r3, [r6, #0]
 8006dfe:	6825      	ldr	r5, [r4, #0]
 8006e00:	f015 0506 	ands.w	r5, r5, #6
 8006e04:	d106      	bne.n	8006e14 <_printf_common+0x48>
 8006e06:	f104 0a19 	add.w	sl, r4, #25
 8006e0a:	68e3      	ldr	r3, [r4, #12]
 8006e0c:	6832      	ldr	r2, [r6, #0]
 8006e0e:	1a9b      	subs	r3, r3, r2
 8006e10:	42ab      	cmp	r3, r5
 8006e12:	dc26      	bgt.n	8006e62 <_printf_common+0x96>
 8006e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e18:	1e13      	subs	r3, r2, #0
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	bf18      	it	ne
 8006e1e:	2301      	movne	r3, #1
 8006e20:	0692      	lsls	r2, r2, #26
 8006e22:	d42b      	bmi.n	8006e7c <_printf_common+0xb0>
 8006e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	47c0      	blx	r8
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d01e      	beq.n	8006e70 <_printf_common+0xa4>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	6922      	ldr	r2, [r4, #16]
 8006e36:	f003 0306 	and.w	r3, r3, #6
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	bf02      	ittt	eq
 8006e3e:	68e5      	ldreq	r5, [r4, #12]
 8006e40:	6833      	ldreq	r3, [r6, #0]
 8006e42:	1aed      	subeq	r5, r5, r3
 8006e44:	68a3      	ldr	r3, [r4, #8]
 8006e46:	bf0c      	ite	eq
 8006e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e4c:	2500      	movne	r5, #0
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	bfc4      	itt	gt
 8006e52:	1a9b      	subgt	r3, r3, r2
 8006e54:	18ed      	addgt	r5, r5, r3
 8006e56:	2600      	movs	r6, #0
 8006e58:	341a      	adds	r4, #26
 8006e5a:	42b5      	cmp	r5, r6
 8006e5c:	d11a      	bne.n	8006e94 <_printf_common+0xc8>
 8006e5e:	2000      	movs	r0, #0
 8006e60:	e008      	b.n	8006e74 <_printf_common+0xa8>
 8006e62:	2301      	movs	r3, #1
 8006e64:	4652      	mov	r2, sl
 8006e66:	4649      	mov	r1, r9
 8006e68:	4638      	mov	r0, r7
 8006e6a:	47c0      	blx	r8
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	d103      	bne.n	8006e78 <_printf_common+0xac>
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295
 8006e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e78:	3501      	adds	r5, #1
 8006e7a:	e7c6      	b.n	8006e0a <_printf_common+0x3e>
 8006e7c:	18e1      	adds	r1, r4, r3
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	2030      	movs	r0, #48	; 0x30
 8006e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e86:	4422      	add	r2, r4
 8006e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e90:	3302      	adds	r3, #2
 8006e92:	e7c7      	b.n	8006e24 <_printf_common+0x58>
 8006e94:	2301      	movs	r3, #1
 8006e96:	4622      	mov	r2, r4
 8006e98:	4649      	mov	r1, r9
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	47c0      	blx	r8
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d0e6      	beq.n	8006e70 <_printf_common+0xa4>
 8006ea2:	3601      	adds	r6, #1
 8006ea4:	e7d9      	b.n	8006e5a <_printf_common+0x8e>
	...

08006ea8 <_printf_i>:
 8006ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006eac:	7e0f      	ldrb	r7, [r1, #24]
 8006eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006eb0:	2f78      	cmp	r7, #120	; 0x78
 8006eb2:	4691      	mov	r9, r2
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	469a      	mov	sl, r3
 8006eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ebe:	d807      	bhi.n	8006ed0 <_printf_i+0x28>
 8006ec0:	2f62      	cmp	r7, #98	; 0x62
 8006ec2:	d80a      	bhi.n	8006eda <_printf_i+0x32>
 8006ec4:	2f00      	cmp	r7, #0
 8006ec6:	f000 80d4 	beq.w	8007072 <_printf_i+0x1ca>
 8006eca:	2f58      	cmp	r7, #88	; 0x58
 8006ecc:	f000 80c0 	beq.w	8007050 <_printf_i+0x1a8>
 8006ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ed8:	e03a      	b.n	8006f50 <_printf_i+0xa8>
 8006eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ede:	2b15      	cmp	r3, #21
 8006ee0:	d8f6      	bhi.n	8006ed0 <_printf_i+0x28>
 8006ee2:	a101      	add	r1, pc, #4	; (adr r1, 8006ee8 <_printf_i+0x40>)
 8006ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ee8:	08006f41 	.word	0x08006f41
 8006eec:	08006f55 	.word	0x08006f55
 8006ef0:	08006ed1 	.word	0x08006ed1
 8006ef4:	08006ed1 	.word	0x08006ed1
 8006ef8:	08006ed1 	.word	0x08006ed1
 8006efc:	08006ed1 	.word	0x08006ed1
 8006f00:	08006f55 	.word	0x08006f55
 8006f04:	08006ed1 	.word	0x08006ed1
 8006f08:	08006ed1 	.word	0x08006ed1
 8006f0c:	08006ed1 	.word	0x08006ed1
 8006f10:	08006ed1 	.word	0x08006ed1
 8006f14:	08007059 	.word	0x08007059
 8006f18:	08006f81 	.word	0x08006f81
 8006f1c:	08007013 	.word	0x08007013
 8006f20:	08006ed1 	.word	0x08006ed1
 8006f24:	08006ed1 	.word	0x08006ed1
 8006f28:	0800707b 	.word	0x0800707b
 8006f2c:	08006ed1 	.word	0x08006ed1
 8006f30:	08006f81 	.word	0x08006f81
 8006f34:	08006ed1 	.word	0x08006ed1
 8006f38:	08006ed1 	.word	0x08006ed1
 8006f3c:	0800701b 	.word	0x0800701b
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	1d1a      	adds	r2, r3, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	602a      	str	r2, [r5, #0]
 8006f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f50:	2301      	movs	r3, #1
 8006f52:	e09f      	b.n	8007094 <_printf_i+0x1ec>
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	682b      	ldr	r3, [r5, #0]
 8006f58:	0607      	lsls	r7, r0, #24
 8006f5a:	f103 0104 	add.w	r1, r3, #4
 8006f5e:	6029      	str	r1, [r5, #0]
 8006f60:	d501      	bpl.n	8006f66 <_printf_i+0xbe>
 8006f62:	681e      	ldr	r6, [r3, #0]
 8006f64:	e003      	b.n	8006f6e <_printf_i+0xc6>
 8006f66:	0646      	lsls	r6, r0, #25
 8006f68:	d5fb      	bpl.n	8006f62 <_printf_i+0xba>
 8006f6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	da03      	bge.n	8006f7a <_printf_i+0xd2>
 8006f72:	232d      	movs	r3, #45	; 0x2d
 8006f74:	4276      	negs	r6, r6
 8006f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7a:	485a      	ldr	r0, [pc, #360]	; (80070e4 <_printf_i+0x23c>)
 8006f7c:	230a      	movs	r3, #10
 8006f7e:	e012      	b.n	8006fa6 <_printf_i+0xfe>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	6820      	ldr	r0, [r4, #0]
 8006f84:	1d19      	adds	r1, r3, #4
 8006f86:	6029      	str	r1, [r5, #0]
 8006f88:	0605      	lsls	r5, r0, #24
 8006f8a:	d501      	bpl.n	8006f90 <_printf_i+0xe8>
 8006f8c:	681e      	ldr	r6, [r3, #0]
 8006f8e:	e002      	b.n	8006f96 <_printf_i+0xee>
 8006f90:	0641      	lsls	r1, r0, #25
 8006f92:	d5fb      	bpl.n	8006f8c <_printf_i+0xe4>
 8006f94:	881e      	ldrh	r6, [r3, #0]
 8006f96:	4853      	ldr	r0, [pc, #332]	; (80070e4 <_printf_i+0x23c>)
 8006f98:	2f6f      	cmp	r7, #111	; 0x6f
 8006f9a:	bf0c      	ite	eq
 8006f9c:	2308      	moveq	r3, #8
 8006f9e:	230a      	movne	r3, #10
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fa6:	6865      	ldr	r5, [r4, #4]
 8006fa8:	60a5      	str	r5, [r4, #8]
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	bfa2      	ittt	ge
 8006fae:	6821      	ldrge	r1, [r4, #0]
 8006fb0:	f021 0104 	bicge.w	r1, r1, #4
 8006fb4:	6021      	strge	r1, [r4, #0]
 8006fb6:	b90e      	cbnz	r6, 8006fbc <_printf_i+0x114>
 8006fb8:	2d00      	cmp	r5, #0
 8006fba:	d04b      	beq.n	8007054 <_printf_i+0x1ac>
 8006fbc:	4615      	mov	r5, r2
 8006fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fc2:	fb03 6711 	mls	r7, r3, r1, r6
 8006fc6:	5dc7      	ldrb	r7, [r0, r7]
 8006fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fcc:	4637      	mov	r7, r6
 8006fce:	42bb      	cmp	r3, r7
 8006fd0:	460e      	mov	r6, r1
 8006fd2:	d9f4      	bls.n	8006fbe <_printf_i+0x116>
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d10b      	bne.n	8006ff0 <_printf_i+0x148>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	07de      	lsls	r6, r3, #31
 8006fdc:	d508      	bpl.n	8006ff0 <_printf_i+0x148>
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	6861      	ldr	r1, [r4, #4]
 8006fe2:	4299      	cmp	r1, r3
 8006fe4:	bfde      	ittt	le
 8006fe6:	2330      	movle	r3, #48	; 0x30
 8006fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ff0:	1b52      	subs	r2, r2, r5
 8006ff2:	6122      	str	r2, [r4, #16]
 8006ff4:	f8cd a000 	str.w	sl, [sp]
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	aa03      	add	r2, sp, #12
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	4640      	mov	r0, r8
 8007000:	f7ff fee4 	bl	8006dcc <_printf_common>
 8007004:	3001      	adds	r0, #1
 8007006:	d14a      	bne.n	800709e <_printf_i+0x1f6>
 8007008:	f04f 30ff 	mov.w	r0, #4294967295
 800700c:	b004      	add	sp, #16
 800700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	f043 0320 	orr.w	r3, r3, #32
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	4833      	ldr	r0, [pc, #204]	; (80070e8 <_printf_i+0x240>)
 800701c:	2778      	movs	r7, #120	; 0x78
 800701e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	6829      	ldr	r1, [r5, #0]
 8007026:	061f      	lsls	r7, r3, #24
 8007028:	f851 6b04 	ldr.w	r6, [r1], #4
 800702c:	d402      	bmi.n	8007034 <_printf_i+0x18c>
 800702e:	065f      	lsls	r7, r3, #25
 8007030:	bf48      	it	mi
 8007032:	b2b6      	uxthmi	r6, r6
 8007034:	07df      	lsls	r7, r3, #31
 8007036:	bf48      	it	mi
 8007038:	f043 0320 	orrmi.w	r3, r3, #32
 800703c:	6029      	str	r1, [r5, #0]
 800703e:	bf48      	it	mi
 8007040:	6023      	strmi	r3, [r4, #0]
 8007042:	b91e      	cbnz	r6, 800704c <_printf_i+0x1a4>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	f023 0320 	bic.w	r3, r3, #32
 800704a:	6023      	str	r3, [r4, #0]
 800704c:	2310      	movs	r3, #16
 800704e:	e7a7      	b.n	8006fa0 <_printf_i+0xf8>
 8007050:	4824      	ldr	r0, [pc, #144]	; (80070e4 <_printf_i+0x23c>)
 8007052:	e7e4      	b.n	800701e <_printf_i+0x176>
 8007054:	4615      	mov	r5, r2
 8007056:	e7bd      	b.n	8006fd4 <_printf_i+0x12c>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	6826      	ldr	r6, [r4, #0]
 800705c:	6961      	ldr	r1, [r4, #20]
 800705e:	1d18      	adds	r0, r3, #4
 8007060:	6028      	str	r0, [r5, #0]
 8007062:	0635      	lsls	r5, r6, #24
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	d501      	bpl.n	800706c <_printf_i+0x1c4>
 8007068:	6019      	str	r1, [r3, #0]
 800706a:	e002      	b.n	8007072 <_printf_i+0x1ca>
 800706c:	0670      	lsls	r0, r6, #25
 800706e:	d5fb      	bpl.n	8007068 <_printf_i+0x1c0>
 8007070:	8019      	strh	r1, [r3, #0]
 8007072:	2300      	movs	r3, #0
 8007074:	6123      	str	r3, [r4, #16]
 8007076:	4615      	mov	r5, r2
 8007078:	e7bc      	b.n	8006ff4 <_printf_i+0x14c>
 800707a:	682b      	ldr	r3, [r5, #0]
 800707c:	1d1a      	adds	r2, r3, #4
 800707e:	602a      	str	r2, [r5, #0]
 8007080:	681d      	ldr	r5, [r3, #0]
 8007082:	6862      	ldr	r2, [r4, #4]
 8007084:	2100      	movs	r1, #0
 8007086:	4628      	mov	r0, r5
 8007088:	f7f9 f8b2 	bl	80001f0 <memchr>
 800708c:	b108      	cbz	r0, 8007092 <_printf_i+0x1ea>
 800708e:	1b40      	subs	r0, r0, r5
 8007090:	6060      	str	r0, [r4, #4]
 8007092:	6863      	ldr	r3, [r4, #4]
 8007094:	6123      	str	r3, [r4, #16]
 8007096:	2300      	movs	r3, #0
 8007098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800709c:	e7aa      	b.n	8006ff4 <_printf_i+0x14c>
 800709e:	6923      	ldr	r3, [r4, #16]
 80070a0:	462a      	mov	r2, r5
 80070a2:	4649      	mov	r1, r9
 80070a4:	4640      	mov	r0, r8
 80070a6:	47d0      	blx	sl
 80070a8:	3001      	adds	r0, #1
 80070aa:	d0ad      	beq.n	8007008 <_printf_i+0x160>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	079b      	lsls	r3, r3, #30
 80070b0:	d413      	bmi.n	80070da <_printf_i+0x232>
 80070b2:	68e0      	ldr	r0, [r4, #12]
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	4298      	cmp	r0, r3
 80070b8:	bfb8      	it	lt
 80070ba:	4618      	movlt	r0, r3
 80070bc:	e7a6      	b.n	800700c <_printf_i+0x164>
 80070be:	2301      	movs	r3, #1
 80070c0:	4632      	mov	r2, r6
 80070c2:	4649      	mov	r1, r9
 80070c4:	4640      	mov	r0, r8
 80070c6:	47d0      	blx	sl
 80070c8:	3001      	adds	r0, #1
 80070ca:	d09d      	beq.n	8007008 <_printf_i+0x160>
 80070cc:	3501      	adds	r5, #1
 80070ce:	68e3      	ldr	r3, [r4, #12]
 80070d0:	9903      	ldr	r1, [sp, #12]
 80070d2:	1a5b      	subs	r3, r3, r1
 80070d4:	42ab      	cmp	r3, r5
 80070d6:	dcf2      	bgt.n	80070be <_printf_i+0x216>
 80070d8:	e7eb      	b.n	80070b2 <_printf_i+0x20a>
 80070da:	2500      	movs	r5, #0
 80070dc:	f104 0619 	add.w	r6, r4, #25
 80070e0:	e7f5      	b.n	80070ce <_printf_i+0x226>
 80070e2:	bf00      	nop
 80070e4:	080073ed 	.word	0x080073ed
 80070e8:	080073fe 	.word	0x080073fe

080070ec <memmove>:
 80070ec:	4288      	cmp	r0, r1
 80070ee:	b510      	push	{r4, lr}
 80070f0:	eb01 0402 	add.w	r4, r1, r2
 80070f4:	d902      	bls.n	80070fc <memmove+0x10>
 80070f6:	4284      	cmp	r4, r0
 80070f8:	4623      	mov	r3, r4
 80070fa:	d807      	bhi.n	800710c <memmove+0x20>
 80070fc:	1e43      	subs	r3, r0, #1
 80070fe:	42a1      	cmp	r1, r4
 8007100:	d008      	beq.n	8007114 <memmove+0x28>
 8007102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800710a:	e7f8      	b.n	80070fe <memmove+0x12>
 800710c:	4402      	add	r2, r0
 800710e:	4601      	mov	r1, r0
 8007110:	428a      	cmp	r2, r1
 8007112:	d100      	bne.n	8007116 <memmove+0x2a>
 8007114:	bd10      	pop	{r4, pc}
 8007116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800711a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800711e:	e7f7      	b.n	8007110 <memmove+0x24>

08007120 <_sbrk_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d06      	ldr	r5, [pc, #24]	; (800713c <_sbrk_r+0x1c>)
 8007124:	2300      	movs	r3, #0
 8007126:	4604      	mov	r4, r0
 8007128:	4608      	mov	r0, r1
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	f7fa f94a 	bl	80013c4 <_sbrk>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_sbrk_r+0x1a>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_sbrk_r+0x1a>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	200002fc 	.word	0x200002fc

08007140 <memcpy>:
 8007140:	440a      	add	r2, r1
 8007142:	4291      	cmp	r1, r2
 8007144:	f100 33ff 	add.w	r3, r0, #4294967295
 8007148:	d100      	bne.n	800714c <memcpy+0xc>
 800714a:	4770      	bx	lr
 800714c:	b510      	push	{r4, lr}
 800714e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007156:	4291      	cmp	r1, r2
 8007158:	d1f9      	bne.n	800714e <memcpy+0xe>
 800715a:	bd10      	pop	{r4, pc}

0800715c <_realloc_r>:
 800715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007160:	4680      	mov	r8, r0
 8007162:	4614      	mov	r4, r2
 8007164:	460e      	mov	r6, r1
 8007166:	b921      	cbnz	r1, 8007172 <_realloc_r+0x16>
 8007168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800716c:	4611      	mov	r1, r2
 800716e:	f7ff bc49 	b.w	8006a04 <_malloc_r>
 8007172:	b92a      	cbnz	r2, 8007180 <_realloc_r+0x24>
 8007174:	f7ff fbda 	bl	800692c <_free_r>
 8007178:	4625      	mov	r5, r4
 800717a:	4628      	mov	r0, r5
 800717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007180:	f000 f81b 	bl	80071ba <_malloc_usable_size_r>
 8007184:	4284      	cmp	r4, r0
 8007186:	4607      	mov	r7, r0
 8007188:	d802      	bhi.n	8007190 <_realloc_r+0x34>
 800718a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800718e:	d812      	bhi.n	80071b6 <_realloc_r+0x5a>
 8007190:	4621      	mov	r1, r4
 8007192:	4640      	mov	r0, r8
 8007194:	f7ff fc36 	bl	8006a04 <_malloc_r>
 8007198:	4605      	mov	r5, r0
 800719a:	2800      	cmp	r0, #0
 800719c:	d0ed      	beq.n	800717a <_realloc_r+0x1e>
 800719e:	42bc      	cmp	r4, r7
 80071a0:	4622      	mov	r2, r4
 80071a2:	4631      	mov	r1, r6
 80071a4:	bf28      	it	cs
 80071a6:	463a      	movcs	r2, r7
 80071a8:	f7ff ffca 	bl	8007140 <memcpy>
 80071ac:	4631      	mov	r1, r6
 80071ae:	4640      	mov	r0, r8
 80071b0:	f7ff fbbc 	bl	800692c <_free_r>
 80071b4:	e7e1      	b.n	800717a <_realloc_r+0x1e>
 80071b6:	4635      	mov	r5, r6
 80071b8:	e7df      	b.n	800717a <_realloc_r+0x1e>

080071ba <_malloc_usable_size_r>:
 80071ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071be:	1f18      	subs	r0, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfbc      	itt	lt
 80071c4:	580b      	ldrlt	r3, [r1, r0]
 80071c6:	18c0      	addlt	r0, r0, r3
 80071c8:	4770      	bx	lr
	...

080071cc <_init>:
 80071cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ce:	bf00      	nop
 80071d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d2:	bc08      	pop	{r3}
 80071d4:	469e      	mov	lr, r3
 80071d6:	4770      	bx	lr

080071d8 <_fini>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	bf00      	nop
 80071dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071de:	bc08      	pop	{r3}
 80071e0:	469e      	mov	lr, r3
 80071e2:	4770      	bx	lr
